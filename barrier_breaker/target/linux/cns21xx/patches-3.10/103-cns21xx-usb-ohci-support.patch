--- a/drivers/usb/host/ohci-hcd.c
+++ b/drivers/usb/host/ohci-hcd.c
@@ -697,6 +697,9 @@ retry:
 
 	periodic_reinit (ohci);
 
+	if (ohci->flags & OHCI_QUIRK_INIT_FMINTERVAL)
+		ohci_writel (ohci, ohci->fminterval, &ohci->regs->fminterval);
+
 	/* some OHCI implementations are finicky about how they init.
 	 * bogus values here mean not even enumeration could work.
 	 */
@@ -1191,6 +1194,11 @@ MODULE_LICENSE ("GPL");
 #define PLATFORM_DRIVER		ohci_hcd_tilegx_driver
 #endif
 
+#ifdef CONFIG_ARCH_CNS21XX
+#include "ohci-cns21xx.c"
+#define CNS21XX_PLATFORM_DRIVER		ohci_cns21xx_driver
+#endif
+
 #ifdef CONFIG_USB_OHCI_HCD_PLATFORM
 #include "ohci-platform.c"
 #define PLATFORM_DRIVER		ohci_platform_driver
@@ -1211,7 +1219,8 @@ MODULE_LICENSE ("GPL");
 	!defined(AT91_PLATFORM_DRIVER) && \
 	!defined(NXP_PLATFORM_DRIVER) && \
 	!defined(DAVINCI_PLATFORM_DRIVER) && \
-	!defined(SPEAR_PLATFORM_DRIVER)
+	!defined(SPEAR_PLATFORM_DRIVER) && \
+	!defined(CNS21XX_PLATFORM_DRIVER)
 #error "missing bus glue for ohci-hcd"
 #endif
 
@@ -1331,9 +1340,19 @@ static int __init ohci_hcd_mod_init(void
 		goto error_spear;
 #endif
 
+#ifdef CNS21XX_PLATFORM_DRIVER
+	retval = platform_driver_register(&CNS21XX_PLATFORM_DRIVER);
+	if (retval < 0)
+		goto error_cns21xx;
+#endif
+
 	return retval;
 
 	/* Error path */
+#ifdef CNS21XX_PLATFORM_DRIVER
+	platform_driver_unregister(&CNS21XX_PLATFORM_DRIVER);
+ error_cns21xx:
+#endif
 #ifdef SPEAR_PLATFORM_DRIVER
 	platform_driver_unregister(&SPEAR_PLATFORM_DRIVER);
  error_spear:
@@ -1411,6 +1430,9 @@ module_init(ohci_hcd_mod_init);
 
 static void __exit ohci_hcd_mod_exit(void)
 {
+#ifdef CNS21XX_PLATFORM_DRIVER
+	platform_driver_unregister(&CNS21XX_PLATFORM_DRIVER);
+#endif
 #ifdef SPEAR_PLATFORM_DRIVER
 	platform_driver_unregister(&SPEAR_PLATFORM_DRIVER);
 #endif
--- /dev/null
+++ b/drivers/usb/host/ohci-cns21xx.c
@@ -0,0 +1,178 @@
+/*
+ *  Copyright (c) 2008 Cavium Networks
+ *  Copyright (c) 2010-2012 Gabor Juhos <juhosg@openwrt.org>
+ *
+ *  This file is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License, Version 2, as
+ *  published by the Free Software Foundation.
+ */
+
+#include <linux/platform_device.h>
+
+#include <mach/cns21xx.h>
+
+#define DRIVER_NAME	"cns21xx-ohci"
+
+static int cns21xx_ohci_start(struct usb_hcd *hcd)
+{
+	struct ohci_hcd *ohci = hcd_to_ohci(hcd);
+	int ret;
+
+	ret = ohci_init(ohci);
+	if (ret)
+		return ret;
+
+	ret = ohci_run(ohci);
+	if (ret) {
+		ohci_err(ohci, "can't start %s",
+			 ohci_to_hcd(ohci)->self.bus_name);
+		goto err;
+	}
+
+	return 0;
+
+err:
+	ohci_stop(hcd);
+	return ret;
+}
+
+static const struct hc_driver ohci_cns21xx_hc_driver = {
+	.description		= hcd_name,
+	.product_desc		= "cns21xx-ohci",
+	.hcd_priv_size		= sizeof(struct ohci_hcd),
+
+	/*
+	 * generic hardware linkage
+	 */
+	.irq			= ohci_irq,
+	.flags			= HCD_USB11 | HCD_MEMORY,
+
+	/*
+	 * basic lifecycle operations
+	 */
+	.start			= cns21xx_ohci_start,
+	.stop			= ohci_stop,
+	.shutdown		= ohci_shutdown,
+
+	/*
+	 * managing i/o requests and associated device resources
+	 */
+	.urb_enqueue		= ohci_urb_enqueue,
+	.urb_dequeue		= ohci_urb_dequeue,
+	.endpoint_disable	= ohci_endpoint_disable,
+
+	/*
+	 * scheduling support
+	 */
+	.get_frame_number	= ohci_get_frame,
+
+	/*
+	 * root hub support
+	 */
+	.hub_status_data	= ohci_hub_status_data,
+	.hub_control		= ohci_hub_control,
+	.start_port_reset	= ohci_start_port_reset,
+};
+
+static void cns21xx_ohci_init_hc(void)
+{
+	void __iomem *base = (void __iomem *) CNS21XX_OHCI_CONFIG_BASE_VIRT;
+
+	__raw_writel(0x146, base + 0x04);
+	__raw_writel(0x200, base + 0x44);
+	msleep(100);
+}
+
+static int ohci_cns21xx_probe(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd;
+	struct resource *res;
+	struct ohci_hcd *ohci;
+	int irq;
+	int ret;
+
+	if (usb_disabled())
+		return -ENODEV;
+
+	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+	if (!res) {
+		dev_dbg(&pdev->dev, "no IRQ specified for %s\n",
+			dev_name(&pdev->dev));
+		return -ENODEV;
+	}
+	irq = res->start;
+
+	hcd = usb_create_hcd(&ohci_cns21xx_hc_driver, &pdev->dev,
+			     dev_name(&pdev->dev));
+	if (!hcd)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_dbg(&pdev->dev, "no base address specified for %s\n",
+			dev_name(&pdev->dev));
+		ret = -ENODEV;
+		goto err_put_hcd;
+	}
+	hcd->rsrc_start	= res->start;
+	hcd->rsrc_len	= res->end - res->start + 1;
+
+	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len, hcd_name)) {
+		dev_dbg(&pdev->dev, "controller already in use\n");
+		ret = -EBUSY;
+		goto err_put_hcd;
+	}
+
+	hcd->regs = ioremap(hcd->rsrc_start, hcd->rsrc_len);
+	if (!hcd->regs) {
+		dev_dbg(&pdev->dev, "error mapping memory\n");
+		ret = -EFAULT;
+		goto err_release_region;
+	}
+
+	cns21xx_ohci_init_hc();
+
+	ohci = hcd_to_ohci(hcd);
+	ohci->flags |= OHCI_QUIRK_INIT_FMINTERVAL;
+	ohci_hcd_init(ohci);
+
+	ret = usb_add_hcd(hcd, irq,  IRQF_DISABLED);
+	if (ret)
+		goto err_unmap;
+
+	platform_set_drvdata(pdev, hcd);
+	return 0;
+
+err_unmap:
+	iounmap(hcd->regs);
+err_release_region:
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+err_put_hcd:
+	usb_put_hcd(hcd);
+	return ret;
+}
+
+static int ohci_cns21xx_remove(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(pdev);
+
+	usb_remove_hcd(hcd);
+	iounmap(hcd->regs);
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+	usb_put_hcd(hcd);
+	platform_set_drvdata(pdev, NULL);
+
+	return 0;
+}
+
+static struct platform_driver ohci_cns21xx_driver = {
+	.probe		= ohci_cns21xx_probe,
+	.remove		= ohci_cns21xx_remove,
+	.shutdown	= usb_hcd_platform_shutdown,
+	.driver		= {
+		.owner	= THIS_MODULE,
+		.name	= DRIVER_NAME,
+	},
+};
+
+MODULE_ALIAS("platform:" DRIVER_NAME);
--- a/drivers/usb/host/ohci.h
+++ b/drivers/usb/host/ohci.h
@@ -406,6 +406,7 @@ struct ohci_hcd {
 #define	OHCI_QUIRK_AMD_PLL	0x200			/* AMD PLL quirk*/
 #define	OHCI_QUIRK_AMD_PREFETCH	0x400			/* pre-fetch for ISO transfer */
 #define	OHCI_QUIRK_GLOBAL_SUSPEND	0x800		/* must suspend ports */
+#define	OHCI_QUIRK_INIT_FMINTERVAL 0x1000		/* fminterval must be initialized */
 
 	// there are also chip quirks/bugs in init logic
 
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -374,6 +374,7 @@ config ARCH_CNS21XX
 	select PLAT_FA_GPIO
 	select ARCH_REQUIRE_GPIOLIB
 	select ARM_L1_CACHE_SHIFT_4
+	select USB_ARCH_HAS_OHCI
 	help
 	  Support for Cavium Networks CNS21xx family.
 
