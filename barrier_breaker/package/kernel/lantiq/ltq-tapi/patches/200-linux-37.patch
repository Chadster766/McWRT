--- a/src/drv_tapi_linux.c
+++ b/src/drv_tapi_linux.c
@@ -47,7 +47,9 @@
 #include <linux/errno.h>
 #include <asm/uaccess.h>               /* copy_from_user(), ... */
 #include <asm/byteorder.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,33))
 #include <linux/smp_lock.h>         /* lock_kernel() */
+#endif
 #include <asm/io.h>
 
 #ifdef LINUX_2_6
@@ -65,7 +67,9 @@
 #else
    #include <linux/tqueue.h>
    #include <linux/sched.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,33))
    #include <linux/smp_lock.h>         /* lock_kernel() */
+#endif
 #endif /* LINUX_2_6 */
 
 #include "drv_tapi.h"
@@ -133,8 +137,13 @@
                               size_t count, loff_t * ppos);
 static ssize_t ifx_tapi_read(struct file * filp, char *buf,
                               size_t length, loff_t * ppos);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36))
 static int ifx_tapi_ioctl(struct inode *inode, struct file *filp,
                               unsigned int nCmd, unsigned long nArgument);
+#else
+static long ifx_tapi_ioctl(struct file *filp,
+                              unsigned int nCmd, unsigned long nArgument);
+#endif
 static unsigned int ifx_tapi_poll (struct file *filp, poll_table *table);
 
 #ifdef CONFIG_PROC_FS
@@ -218,7 +227,11 @@
    IFX_char_t   *pRegDrvName = IFX_NULL;
    IFX_int32_t ret = 0;
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36))
    if (tapi_fops.ioctl == IFX_NULL)
+#else
+   if (tapi_fops.unlocked_ioctl == IFX_NULL)
+#endif
    {
 #ifdef MODULE
       tapi_fops.owner =    THIS_MODULE;
@@ -226,7 +239,11 @@
       tapi_fops.read =     ifx_tapi_read;
       tapi_fops.write =    ifx_tapi_write;
       tapi_fops.poll =     ifx_tapi_poll;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36))
       tapi_fops.ioctl =    ifx_tapi_ioctl;
+#else
+      tapi_fops.unlocked_ioctl =    ifx_tapi_ioctl;
+#endif
       tapi_fops.open =     ifx_tapi_open;
       tapi_fops.release =  ifx_tapi_release;
    }
@@ -881,8 +898,13 @@
    - 0 and positive values - success
    - negative value - ioctl failed
 */
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36))
 static int ifx_tapi_ioctl(struct inode *inode, struct file *filp,
                           unsigned int nCmd, unsigned long nArg)
+#else
+static long ifx_tapi_ioctl(struct file *filp,
+                          unsigned int nCmd, unsigned long nArg)
+#endif
 {
    TAPI_FD_PRIV_DATA_t *pTapiPriv;
    IFX_TAPI_ioctlCtx_t  ctx;
@@ -3721,7 +3743,9 @@
             kernel lock (lock_kernel()). The lock must be
             grabbed before changing the terminate
             flag and released after the down() call. */
-         lock_kernel();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,33)
+	 lock_kernel();
+#endif
          mb();
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)
          kill_proc(pThrCntrl->tid, SIGKILL, 1);
@@ -3729,8 +3753,10 @@
          kill_pid(find_vpid(pThrCntrl->tid), SIGKILL, 1);
 #endif
          /* release the big kernel lock */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,33)
          unlock_kernel();
-         wait_for_completion (&pThrCntrl->thrCompletion);
+#endif
+	 wait_for_completion (&pThrCntrl->thrCompletion);
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,23)
          /* Now we are sure the thread is in zombie state.
--- a/src/lib/lib_fifo/lib_fifo.c
+++ b/src/lib/lib_fifo/lib_fifo.c
@@ -41,7 +41,7 @@
 #ifdef LINUX
 /* if linux/slab.h is not available, use the precessor linux/malloc.h */
 #include <linux/slab.h>
-#elif VXWORKS
+#elif defined(VXWORKS)
 #include <sys_drv_debug.h>
 #endif /* LINUX */
 
