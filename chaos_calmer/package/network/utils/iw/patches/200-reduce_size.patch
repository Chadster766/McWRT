--- a/Makefile
+++ b/Makefile
@@ -15,8 +15,8 @@ CFLAGS += -Wall -Wundef -Wstrict-prototy
 OBJS = iw.o genl.o event.o info.o phy.o \
 	interface.o ibss.o station.o survey.o util.o \
 	mesh.o mpath.o scan.o reg.o version.o \
-	reason.o status.o connect.o link.o offch.o ps.o cqm.o \
-	bitrate.o wowlan.o coalesce.o roc.o p2p.o
+	reason.o status.o connect.o link.o ps.o \
+	bitrate.o
 OBJS += sections.o
 
 OBJS-$(HWSIM) += hwsim.o
--- a/info.c
+++ b/info.c
@@ -207,6 +207,7 @@ next:
 				}
 			}
 
+#if 0
 			if (tb_band[NL80211_BAND_ATTR_RATES]) {
 			printf("\t\tBitrates (non-HT):\n");
 			nla_for_each_nested(nl_rate, tb_band[NL80211_BAND_ATTR_RATES], rem_rate) {
@@ -223,6 +224,7 @@ next:
 				printf("\n");
 			}
 			}
+#endif
 		}
 	}
 
@@ -273,6 +275,7 @@ next:
 		printf("\tCoverage class: %d (up to %dm)\n", coverage, 450 * coverage);
 	}
 
+#if 0
 	if (tb_msg[NL80211_ATTR_CIPHER_SUITES]) {
 		int num = nla_len(tb_msg[NL80211_ATTR_CIPHER_SUITES]) / sizeof(__u32);
 		int i;
@@ -284,6 +287,7 @@ next:
 					cipher_name(ciphers[i]));
 		}
 	}
+#endif
 
 	if (tb_msg[NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX] &&
 	    tb_msg[NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX])
@@ -303,11 +307,13 @@ next:
 			printf("\t\t * %s\n", iftype_name(nla_type(nl_mode)));
 	}
 
+#if 0
 	if (tb_msg[NL80211_ATTR_SOFTWARE_IFTYPES]) {
 		printf("\tsoftware interface modes (can always be added):\n");
 		nla_for_each_nested(nl_mode, tb_msg[NL80211_ATTR_SOFTWARE_IFTYPES], rem_mode)
 			printf("\t\t * %s\n", iftype_name(nla_type(nl_mode)));
 	}
+#endif
 
 	if (tb_msg[NL80211_ATTR_INTERFACE_COMBINATIONS]) {
 		struct nlattr *nl_combi;
@@ -404,6 +410,7 @@ broken_combination:
 			printf("\tinterface combinations are not supported\n");
 	}
 
+#if 0
 	if (tb_msg[NL80211_ATTR_SUPPORTED_COMMANDS]) {
 		printf("\tSupported commands:\n");
 		nla_for_each_nested(nl_cmd, tb_msg[NL80211_ATTR_SUPPORTED_COMMANDS], rem_cmd)
@@ -496,6 +503,7 @@ broken_combination:
 				printf("\t\t * wake up on TCP connection\n");
 		}
 	}
+#endif
 
 	if (tb_msg[NL80211_ATTR_ROAM_SUPPORT])
 		printf("\tDevice supports roaming.\n");
@@ -532,6 +540,7 @@ broken_combination:
 		}
 	}
 
+#if 0
 	if (tb_msg[NL80211_ATTR_FEATURE_FLAGS]) {
 		unsigned int features = nla_get_u32(tb_msg[NL80211_ATTR_FEATURE_FLAGS]);
 
@@ -554,6 +563,7 @@ broken_combination:
 		if (features & NL80211_FEATURE_ACKTO_ESTIMATION)
 			printf("\tDevice supports ACK timeout estimation.\n");
 	}
+#endif
 
 	if (tb_msg[NL80211_ATTR_TDLS_SUPPORT])
 		printf("\tDevice supports T-DLS.\n");
@@ -603,6 +613,7 @@ TOPLEVEL(list, NULL, NL80211_CMD_GET_WIP
 	 "List all wireless devices and their capabilities.");
 TOPLEVEL(phy, NULL, NL80211_CMD_GET_WIPHY, NLM_F_DUMP, CIB_NONE, handle_info, NULL);
 
+#if 0
 static int handle_commands(struct nl80211_state *state,
 			   struct nl_cb *cb, struct nl_msg *msg,
 			   int argc, char **argv, enum id_input id)
@@ -615,6 +626,7 @@ static int handle_commands(struct nl8021
 }
 TOPLEVEL(commands, NULL, NL80211_CMD_GET_WIPHY, 0, CIB_NONE, handle_commands,
 	 "list all known commands and their decimal & hex value");
+#endif
 
 static int print_feature_handler(struct nl_msg *msg, void *arg)
 {
