--- a/Embedded/src/WDT/iwdt.c
+++ b/Embedded/src/WDT/iwdt.c
@@ -180,19 +180,19 @@ MODULE_PARM_DESC(wdt_scale, "Intel WDT s
 module_param(wdt_intr_type, byte, WDT_INT_TYPE_IRQ);
 MODULE_PARM_DESC(wdt_intr_type, "Intel WDT interrupt type (default SERIRQ).");
 
-module_param(wdt_margin1, uint, TIMER_MARGIN);
+module_param(wdt_margin1, uint, 0);
 MODULE_PARM_DESC(wdt_margin1, "First stage Intel WDT timeout in steps of 1 ms by default.");
 
-module_param(wdt_margin2, uint, TIMER_MARGIN);
+module_param(wdt_margin2, uint, 0);
 MODULE_PARM_DESC(wdt_margin2, "Second stage Intel WDT timeout in steps of 1 ms by default.");
 
 module_param(nowayout, int, 0);
 MODULE_PARM_DESC(nowayout, "Intel WDT can't be stopped once started (default=0)");
 
-module_param(wdt_index_port, int, 0x4E);
+module_param(wdt_index_port, int, 0);
 MODULE_PARM_DESC(wdt_index_port, "WDT Index Port (default 0x4e)");
 
-module_param(wdt_data_port, int, 0x4E);
+module_param(wdt_data_port, int, 0);
 MODULE_PARM_DESC(wdt_data_port, "WDT Data Port (default 0x4f)");
 
 static int wdt_get_iobase(struct pci_dev *dev, u16 *iobase, int *irq);
@@ -218,7 +218,7 @@ static ssize_t wdt_write(struct file *fi
                      size_t count, loff_t * pos);
 static int wdt_ioctl(struct inode *inode, struct file *file,
                     unsigned int cmd, unsigned long arg);
-static irqreturn_t wdt_isr(int irq, void *dev_id, struct pt_regs *regs);
+static irqreturn_t wdt_isr(int irq, void *dev_id);
 static void __exit wdt_cleanup(void);
 static int __init wdt_init(void);
 static int __init wdt_init_one(struct pci_dev *dev,
@@ -255,7 +255,7 @@ static struct pci_driver wdt_driver = {
      name:        "iwdt",
      id_table:     lpc_pci_tbl,
      probe:        wdt_init_one,
-     remove:        __devexit(wdt_remove_one),
+     remove:        __devexit_p(wdt_remove_one),
      suspend:      wdt_pci_suspend,
      resume:       wdt_pci_resume,
 };
@@ -1393,12 +1393,12 @@ static int wdt_ioctl(struct inode *inode
 
 /*
  * Function Name:   wdt_isr()
- * Parameter:    int irq - irq number, void *dev_id, struct pt_regs *regs
+ * Parameter:    int irq - irq number, void *dev_id
  * Return Value::   IRQ_NONE -  if the interrupt is not for wdt.
  *           IRQ_HANDLED - if it is for wdt.
  * Description:     This is the interrupt service routine of the WDT.
  */
-static irqreturn_t wdt_isr(int irq, void *dev_id, struct pt_regs *regs)
+static irqreturn_t wdt_isr(int irq, void *dev_id)
 {
      u8 val;
 
