--- a/include/string.h
+++ b/include/string.h
@@ -355,18 +355,40 @@ extern char *index (__const char *__s, i
 /* Find the last occurrence of C in S (same as strrchr).  */
 extern char *rindex (__const char *__s, int __c)
      __THROW __attribute_pure__ __nonnull ((1));
-# else
-#  ifdef __UCLIBC_SUSV3_LEGACY_MACROS__
+# elif defined(__UCLIBC_SUSV3_LEGACY_MACROS__) && !defined(_STRINGS_H)
 /* bcopy/bzero/bcmp/index/rindex are marked LEGACY in SuSv3.
  * They are replaced as proposed by SuSv3. Don't sync this part
  * with glibc and keep it in sync with strings.h.  */
 
-#  define bcopy(src,dest,n) (memmove((dest), (src), (n)), (void) 0)
-#  define bzero(s,n) (memset((s), '\0', (n)), (void) 0)
-#  define bcmp(s1,s2,n) memcmp((s1), (s2), (size_t)(n))
-#  define index(s,c) strchr((s), (c))
-#  define rindex(s,c) strrchr((s), (c))
-#  endif
+/* Copy N bytes of SRC to DEST (like memmove, but args reversed).  */
+static __inline__ void bcopy (__const void *__src, void *__dest, size_t __n)
+{
+	memmove(__dest, __src, __n);
+}
+
+/* Set N bytes of S to 0.  */
+static __inline__ void bzero (void *__s, size_t __n)
+{
+	memset(__s, 0, __n);
+}
+
+/* Compare N bytes of S1 and S2 (same as memcmp).  */
+static __inline__ int bcmp (__const void *__s1, __const void *__s2, size_t __n)
+{
+	return memcmp(__s1, __s2, __n);
+}
+
+/* Find the first occurrence of C in S (same as strchr).  */
+static __inline__ char *index (__const char *__s, int __c)
+{
+	return strchr(__s, __c);
+}
+
+/* Find the last occurrence of C in S (same as strrchr).  */
+static __inline__ char *rindex (__const char *__s, int __c)
+{
+	return strrchr(__s, __c);
+}
 # endif
 
 /* Return the position of the first bit set in I, or 0 if none are set.
