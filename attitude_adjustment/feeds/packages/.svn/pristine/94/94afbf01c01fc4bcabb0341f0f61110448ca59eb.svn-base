/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "l2tp_rpc.h"
#include <stdio.h>
#include <stdlib.h>
#include <rpc/pmap_clnt.h>
#include <string.h>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <syslog.h>

#ifndef SIG_PF
#define SIG_PF void(*)(int)
#endif
#define OPTSTRING(_var) _var.optstring_u.value
#define OPTSTRING_PTR(_var) ((_var.valid == 1) ? _var.optstring_u.value : NULL)

int
_l2tp_app_info_get_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_app_info_get_1_svc(result, rqstp));
}

int
_l2tp_system_modify_1 (struct l2tp_api_system_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_system_modify_1_svc(*argp, result, rqstp));
}

int
_l2tp_system_get_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_system_get_1_svc(result, rqstp));
}

int
_l2tp_peer_profile_create_1 (struct l2tp_api_peer_profile_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_peer_profile_create_1_svc(*argp, result, rqstp));
}

int
_l2tp_peer_profile_delete_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_peer_profile_delete_1_svc(*argp, result, rqstp));
}

int
_l2tp_peer_profile_modify_1 (struct l2tp_api_peer_profile_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_peer_profile_modify_1_svc(*argp, result, rqstp));
}

int
_l2tp_peer_profile_get_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_peer_profile_get_1_svc(*argp, result, rqstp));
}

int
_l2tp_peer_profile_list_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_peer_profile_list_1_svc(result, rqstp));
}

int
_l2tp_tunnel_create_1 (struct l2tp_api_tunnel_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_create_1_svc(*argp, result, rqstp));
}

int
_l2tp_tunnel_delete_1 (l2tp_tunnel_delete_1_argument *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_delete_1_svc(argp->tunnel_id, argp->tunnel_name, argp->reason, result, rqstp));
}

int
_l2tp_tunnel_modify_1 (struct l2tp_api_tunnel_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_modify_1_svc(*argp, result, rqstp));
}

int
_l2tp_tunnel_get_1 (l2tp_tunnel_get_1_argument *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_get_1_svc(argp->tunnel_id, argp->tunnel_name, result, rqstp));
}

int
_l2tp_tunnel_list_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_list_1_svc(result, rqstp));
}

int
_l2tp_tunnel_profile_create_1 (struct l2tp_api_tunnel_profile_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_profile_create_1_svc(*argp, result, rqstp));
}

int
_l2tp_tunnel_profile_delete_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_profile_delete_1_svc(*argp, result, rqstp));
}

int
_l2tp_tunnel_profile_modify_1 (struct l2tp_api_tunnel_profile_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_profile_modify_1_svc(*argp, result, rqstp));
}

int
_l2tp_tunnel_profile_get_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_profile_get_1_svc(*argp, result, rqstp));
}

int
_l2tp_tunnel_profile_list_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_profile_list_1_svc(result, rqstp));
}

int
_l2tp_session_create_1 (struct l2tp_api_session_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_create_1_svc(*argp, result, rqstp));
}

int
_l2tp_session_delete_1 (l2tp_session_delete_1_argument *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_delete_1_svc(argp->tunnel_id, argp->tunnel_name, argp->session_id, argp->session_name, argp->reason, result, rqstp));
}

int
_l2tp_session_modify_1 (struct l2tp_api_session_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_modify_1_svc(*argp, result, rqstp));
}

int
_l2tp_session_get_1 (l2tp_session_get_1_argument *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_get_1_svc(argp->tunnel_id, argp->tunnel_name, argp->session_id, argp->session_name, result, rqstp));
}

int
_l2tp_session_list_1 (l2tp_session_list_1_argument *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_list_1_svc(argp->tunnel_id, argp->tunnel_name, result, rqstp));
}

int
_l2tp_session_incall_ind_1 (struct l2tp_api_session_incall_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_incall_ind_1_svc(*argp, result, rqstp));
}

int
_l2tp_session_profile_create_1 (struct l2tp_api_session_profile_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_profile_create_1_svc(*argp, result, rqstp));
}

int
_l2tp_session_profile_delete_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_profile_delete_1_svc(*argp, result, rqstp));
}

int
_l2tp_session_profile_modify_1 (struct l2tp_api_session_profile_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_profile_modify_1_svc(*argp, result, rqstp));
}

int
_l2tp_session_profile_get_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_profile_get_1_svc(*argp, result, rqstp));
}

int
_l2tp_session_profile_list_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_profile_list_1_svc(result, rqstp));
}

int
_l2tp_ppp_profile_create_1 (struct l2tp_api_ppp_profile_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_ppp_profile_create_1_svc(*argp, result, rqstp));
}

int
_l2tp_ppp_profile_delete_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_ppp_profile_delete_1_svc(*argp, result, rqstp));
}

int
_l2tp_ppp_profile_modify_1 (struct l2tp_api_ppp_profile_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_ppp_profile_modify_1_svc(*argp, result, rqstp));
}

int
_l2tp_ppp_profile_get_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_ppp_profile_get_1_svc(*argp, result, rqstp));
}

int
_l2tp_ppp_profile_list_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_ppp_profile_list_1_svc(result, rqstp));
}

int
_l2tp_peer_get_1 (l2tp_peer_get_1_argument *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_peer_get_1_svc(argp->local_addr, argp->peer_addr, result, rqstp));
}

int
_l2tp_peer_list_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_peer_list_1_svc(result, rqstp));
}

int
_l2tp_user_list_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_user_list_1_svc(result, rqstp));
}

int
_l2tp_peer_profile_unset_1 (struct l2tp_api_peer_profile_unset_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_peer_profile_unset_1_svc(*argp, result, rqstp));
}

int
_l2tp_tunnel_profile_unset_1 (struct l2tp_api_tunnel_profile_unset_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_tunnel_profile_unset_1_svc(*argp, result, rqstp));
}

int
_l2tp_session_profile_unset_1 (struct l2tp_api_session_profile_unset_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_session_profile_unset_1_svc(*argp, result, rqstp));
}

int
_l2tp_ppp_profile_unset_1 (struct l2tp_api_ppp_profile_unset_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_ppp_profile_unset_1_svc(*argp, result, rqstp));
}

int
_l2tp_test_log_1 (char * *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_test_log_1_svc(*argp, result, rqstp));
}

int
_l2tp_test_modify_1 (struct l2tp_api_test_msg_data  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_test_modify_1_svc(*argp, result, rqstp));
}

int
_l2tp_test_get_1 (void  *argp, void *result, struct svc_req *rqstp)
{
	return (l2tp_test_get_1_svc(result, rqstp));
}

void
l2tp_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		struct l2tp_api_system_msg_data l2tp_system_modify_1_arg;
		struct l2tp_api_peer_profile_msg_data l2tp_peer_profile_create_1_arg;
		char *l2tp_peer_profile_delete_1_arg;
		struct l2tp_api_peer_profile_msg_data l2tp_peer_profile_modify_1_arg;
		char *l2tp_peer_profile_get_1_arg;
		struct l2tp_api_tunnel_msg_data l2tp_tunnel_create_1_arg;
		l2tp_tunnel_delete_1_argument l2tp_tunnel_delete_1_arg;
		struct l2tp_api_tunnel_msg_data l2tp_tunnel_modify_1_arg;
		l2tp_tunnel_get_1_argument l2tp_tunnel_get_1_arg;
		struct l2tp_api_tunnel_profile_msg_data l2tp_tunnel_profile_create_1_arg;
		char *l2tp_tunnel_profile_delete_1_arg;
		struct l2tp_api_tunnel_profile_msg_data l2tp_tunnel_profile_modify_1_arg;
		char *l2tp_tunnel_profile_get_1_arg;
		struct l2tp_api_session_msg_data l2tp_session_create_1_arg;
		l2tp_session_delete_1_argument l2tp_session_delete_1_arg;
		struct l2tp_api_session_msg_data l2tp_session_modify_1_arg;
		l2tp_session_get_1_argument l2tp_session_get_1_arg;
		l2tp_session_list_1_argument l2tp_session_list_1_arg;
		struct l2tp_api_session_incall_msg_data l2tp_session_incall_ind_1_arg;
		struct l2tp_api_session_profile_msg_data l2tp_session_profile_create_1_arg;
		char *l2tp_session_profile_delete_1_arg;
		struct l2tp_api_session_profile_msg_data l2tp_session_profile_modify_1_arg;
		char *l2tp_session_profile_get_1_arg;
		struct l2tp_api_ppp_profile_msg_data l2tp_ppp_profile_create_1_arg;
		char *l2tp_ppp_profile_delete_1_arg;
		struct l2tp_api_ppp_profile_msg_data l2tp_ppp_profile_modify_1_arg;
		char *l2tp_ppp_profile_get_1_arg;
		l2tp_peer_get_1_argument l2tp_peer_get_1_arg;
		struct l2tp_api_peer_profile_unset_msg_data l2tp_peer_profile_unset_1_arg;
		struct l2tp_api_tunnel_profile_unset_msg_data l2tp_tunnel_profile_unset_1_arg;
		struct l2tp_api_session_profile_unset_msg_data l2tp_session_profile_unset_1_arg;
		struct l2tp_api_ppp_profile_unset_msg_data l2tp_ppp_profile_unset_1_arg;
		char *l2tp_test_log_1_arg;
		struct l2tp_api_test_msg_data l2tp_test_modify_1_arg;
	} argument;
	union {
		struct l2tp_api_app_msg_data l2tp_app_info_get_1_res;
		int l2tp_system_modify_1_res;
		struct l2tp_api_system_msg_data l2tp_system_get_1_res;
		int l2tp_peer_profile_create_1_res;
		int l2tp_peer_profile_delete_1_res;
		int l2tp_peer_profile_modify_1_res;
		struct l2tp_api_peer_profile_msg_data l2tp_peer_profile_get_1_res;
		struct l2tp_api_peer_profile_list_msg_data l2tp_peer_profile_list_1_res;
		int l2tp_tunnel_create_1_res;
		int l2tp_tunnel_delete_1_res;
		int l2tp_tunnel_modify_1_res;
		struct l2tp_api_tunnel_msg_data l2tp_tunnel_get_1_res;
		struct l2tp_api_tunnel_list_msg_data l2tp_tunnel_list_1_res;
		int l2tp_tunnel_profile_create_1_res;
		int l2tp_tunnel_profile_delete_1_res;
		int l2tp_tunnel_profile_modify_1_res;
		struct l2tp_api_tunnel_profile_msg_data l2tp_tunnel_profile_get_1_res;
		struct l2tp_api_tunnel_profile_list_msg_data l2tp_tunnel_profile_list_1_res;
		int l2tp_session_create_1_res;
		int l2tp_session_delete_1_res;
		int l2tp_session_modify_1_res;
		struct l2tp_api_session_msg_data l2tp_session_get_1_res;
		struct l2tp_api_session_list_msg_data l2tp_session_list_1_res;
		int l2tp_session_incall_ind_1_res;
		int l2tp_session_profile_create_1_res;
		int l2tp_session_profile_delete_1_res;
		int l2tp_session_profile_modify_1_res;
		struct l2tp_api_session_profile_msg_data l2tp_session_profile_get_1_res;
		struct l2tp_api_session_profile_list_msg_data l2tp_session_profile_list_1_res;
		int l2tp_ppp_profile_create_1_res;
		int l2tp_ppp_profile_delete_1_res;
		int l2tp_ppp_profile_modify_1_res;
		struct l2tp_api_ppp_profile_msg_data l2tp_ppp_profile_get_1_res;
		struct l2tp_api_ppp_profile_list_msg_data l2tp_ppp_profile_list_1_res;
		struct l2tp_api_peer_msg_data l2tp_peer_get_1_res;
		struct l2tp_api_peer_list_msg_data l2tp_peer_list_1_res;
		struct l2tp_api_user_list_msg_data l2tp_user_list_1_res;
		int l2tp_peer_profile_unset_1_res;
		int l2tp_tunnel_profile_unset_1_res;
		int l2tp_session_profile_unset_1_res;
		int l2tp_ppp_profile_unset_1_res;
		int l2tp_test_log_1_res;
		int l2tp_test_modify_1_res;
		struct l2tp_api_test_msg_data l2tp_test_get_1_res;
	} result;
	bool_t retval;
	xdrproc_t _xdr_argument, _xdr_result;
	bool_t (*local)(char *, void *, struct svc_req *);

	if (l2tp_api_rpc_check_request(transp) < 0) return; switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case L2TP_APP_INFO_GET:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_app_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_app_info_get_1;
		break;

	case L2TP_SYSTEM_MODIFY:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_system_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_system_modify_1;
		break;

	case L2TP_SYSTEM_GET:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_system_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_system_get_1;
		break;

	case L2TP_PEER_PROFILE_CREATE:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_peer_profile_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_peer_profile_create_1;
		break;

	case L2TP_PEER_PROFILE_DELETE:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_peer_profile_delete_1;
		break;

	case L2TP_PEER_PROFILE_MODIFY:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_peer_profile_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_peer_profile_modify_1;
		break;

	case L2TP_PEER_PROFILE_GET:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_peer_profile_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_peer_profile_get_1;
		break;

	case L2TP_PEER_PROFILE_LIST:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_peer_profile_list_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_peer_profile_list_1;
		break;

	case L2TP_TUNNEL_CREATE:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_tunnel_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_create_1;
		break;

	case L2TP_TUNNEL_DELETE:
		_xdr_argument = (xdrproc_t) xdr_l2tp_tunnel_delete_1_argument;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_delete_1;
		break;

	case L2TP_TUNNEL_MODIFY:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_tunnel_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_modify_1;
		break;

	case L2TP_TUNNEL_GET:
		_xdr_argument = (xdrproc_t) xdr_l2tp_tunnel_get_1_argument;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_tunnel_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_get_1;
		break;

	case L2TP_TUNNEL_LIST:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_tunnel_list_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_list_1;
		break;

	case L2TP_TUNNEL_PROFILE_CREATE:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_tunnel_profile_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_profile_create_1;
		break;

	case L2TP_TUNNEL_PROFILE_DELETE:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_profile_delete_1;
		break;

	case L2TP_TUNNEL_PROFILE_MODIFY:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_tunnel_profile_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_profile_modify_1;
		break;

	case L2TP_TUNNEL_PROFILE_GET:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_tunnel_profile_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_profile_get_1;
		break;

	case L2TP_TUNNEL_PROFILE_LIST:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_tunnel_profile_list_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_profile_list_1;
		break;

	case L2TP_SESSION_CREATE:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_session_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_create_1;
		break;

	case L2TP_SESSION_DELETE:
		_xdr_argument = (xdrproc_t) xdr_l2tp_session_delete_1_argument;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_delete_1;
		break;

	case L2TP_SESSION_MODIFY:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_session_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_modify_1;
		break;

	case L2TP_SESSION_GET:
		_xdr_argument = (xdrproc_t) xdr_l2tp_session_get_1_argument;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_session_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_get_1;
		break;

	case L2TP_SESSION_LIST:
		_xdr_argument = (xdrproc_t) xdr_l2tp_session_list_1_argument;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_session_list_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_list_1;
		break;

	case L2TP_SESSION_INCALL_IND:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_session_incall_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_incall_ind_1;
		break;

	case L2TP_SESSION_PROFILE_CREATE:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_session_profile_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_profile_create_1;
		break;

	case L2TP_SESSION_PROFILE_DELETE:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_profile_delete_1;
		break;

	case L2TP_SESSION_PROFILE_MODIFY:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_session_profile_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_profile_modify_1;
		break;

	case L2TP_SESSION_PROFILE_GET:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_session_profile_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_profile_get_1;
		break;

	case L2TP_SESSION_PROFILE_LIST:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_session_profile_list_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_profile_list_1;
		break;

	case L2TP_PPP_PROFILE_CREATE:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_ppp_profile_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_ppp_profile_create_1;
		break;

	case L2TP_PPP_PROFILE_DELETE:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_ppp_profile_delete_1;
		break;

	case L2TP_PPP_PROFILE_MODIFY:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_ppp_profile_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_ppp_profile_modify_1;
		break;

	case L2TP_PPP_PROFILE_GET:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_ppp_profile_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_ppp_profile_get_1;
		break;

	case L2TP_PPP_PROFILE_LIST:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_ppp_profile_list_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_ppp_profile_list_1;
		break;

	case L2TP_PEER_GET:
		_xdr_argument = (xdrproc_t) xdr_l2tp_peer_get_1_argument;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_peer_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_peer_get_1;
		break;

	case L2TP_PEER_LIST:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_peer_list_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_peer_list_1;
		break;

	case L2TP_USER_LIST:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_user_list_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_user_list_1;
		break;

	case L2TP_PEER_PROFILE_UNSET:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_peer_profile_unset_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_peer_profile_unset_1;
		break;

	case L2TP_TUNNEL_PROFILE_UNSET:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_tunnel_profile_unset_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_tunnel_profile_unset_1;
		break;

	case L2TP_SESSION_PROFILE_UNSET:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_session_profile_unset_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_session_profile_unset_1;
		break;

	case L2TP_PPP_PROFILE_UNSET:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_ppp_profile_unset_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_ppp_profile_unset_1;
		break;

	case L2TP_TEST_LOG:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_test_log_1;
		break;

	case L2TP_TEST_MODIFY:
		_xdr_argument = (xdrproc_t) xdr_l2tp_api_test_msg_data;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_test_modify_1;
		break;

	case L2TP_TEST_GET:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_l2tp_api_test_msg_data;
		local = (bool_t (*) (char *, void *,  struct svc_req *))_l2tp_test_get_1;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	retval = (bool_t) (*local)((char *)&argument, (void *)&result, rqstp);
	if (retval > 0 && !svc_sendreply(transp, (xdrproc_t) _xdr_result, (char *)&result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		syslog (LOG_ERR, "%s", "unable to free arguments");
		exit (1);
	}
	if (!l2tp_prog_1_freeresult (transp, _xdr_result, (caddr_t) &result))
		syslog (LOG_ERR, "%s", "unable to free results");

	return;
}
