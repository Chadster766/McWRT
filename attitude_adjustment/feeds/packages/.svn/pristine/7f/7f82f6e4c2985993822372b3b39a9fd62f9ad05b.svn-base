/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "l2tp_rpc.h"

bool_t
xdr_optstring (XDR *xdrs, optstring *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->valid))
		 return FALSE;
	switch (objp->valid) {
	case 1:
		 if (!xdr_string (xdrs, &objp->optstring_u.value, ~0))
			 return FALSE;
		break;
	default:
		break;
	}
	return TRUE;
}
#define OPTSTRING(_var) _var.optstring_u.value
#define OPTSTRING_PTR(_var) ((_var.valid == 1) ? _var.optstring_u.value : NULL)

bool_t
xdr_l2tp_api_tunnel_auth_mode (XDR *xdrs, l2tp_api_tunnel_auth_mode *objp)
{
	register int32_t *buf;

	 if (!xdr_enum (xdrs, (enum_t *) objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_mode (XDR *xdrs, l2tp_api_tunnel_mode *objp)
{
	register int32_t *buf;

	 if (!xdr_enum (xdrs, (enum_t *) objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_ip_addr (XDR *xdrs, l2tp_api_ip_addr *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->s_addr))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_app_msg_data (XDR *xdrs, l2tp_api_app_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_string (xdrs, &objp->build_date, 16))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->build_time, 16))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->major))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->minor))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->cookie))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->patches.patches_val, (u_int *) &objp->patches.patches_len, ~0,
		sizeof (int), (xdrproc_t) xdr_int))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->features))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_system_config (XDR *xdrs, l2tp_api_system_config *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->udp_port))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 9 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->max_tunnels))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->max_sessions))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->drain_tunnels))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->tunnel_establish_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->session_establish_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->tunnel_persist_pend_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->session_persist_pend_timeout))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->deny_local_tunnel_creates))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->deny_remote_tunnel_creates))
				 return FALSE;
		} else {
			IXDR_PUT_LONG(buf, objp->max_tunnels);
			IXDR_PUT_LONG(buf, objp->max_sessions);
			IXDR_PUT_LONG(buf, objp->drain_tunnels);
			IXDR_PUT_LONG(buf, objp->tunnel_establish_timeout);
			IXDR_PUT_LONG(buf, objp->session_establish_timeout);
			IXDR_PUT_LONG(buf, objp->tunnel_persist_pend_timeout);
			IXDR_PUT_LONG(buf, objp->session_persist_pend_timeout);
			IXDR_PUT_BOOL(buf, objp->deny_local_tunnel_creates);
			IXDR_PUT_BOOL(buf, objp->deny_remote_tunnel_creates);
		}
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->udp_port))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 9 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->max_tunnels))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->max_sessions))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->drain_tunnels))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->tunnel_establish_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->session_establish_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->tunnel_persist_pend_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->session_persist_pend_timeout))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->deny_local_tunnel_creates))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->deny_remote_tunnel_creates))
				 return FALSE;
		} else {
			objp->max_tunnels = IXDR_GET_LONG(buf);
			objp->max_sessions = IXDR_GET_LONG(buf);
			objp->drain_tunnels = IXDR_GET_LONG(buf);
			objp->tunnel_establish_timeout = IXDR_GET_LONG(buf);
			objp->session_establish_timeout = IXDR_GET_LONG(buf);
			objp->tunnel_persist_pend_timeout = IXDR_GET_LONG(buf);
			objp->session_persist_pend_timeout = IXDR_GET_LONG(buf);
			objp->deny_local_tunnel_creates = IXDR_GET_BOOL(buf);
			objp->deny_remote_tunnel_creates = IXDR_GET_BOOL(buf);
		}
	 return TRUE;
	}

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->udp_port))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->max_tunnels))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->max_sessions))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->drain_tunnels))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->tunnel_establish_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->session_establish_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->tunnel_persist_pend_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->session_persist_pend_timeout))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->deny_local_tunnel_creates))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->deny_remote_tunnel_creates))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_system_msg_stats (XDR *xdrs, l2tp_api_system_msg_stats *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->rx))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->tx))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->rx_bad))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_system_stats (XDR *xdrs, l2tp_api_system_stats *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->short_frames))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->wrong_version_frames))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->unexpected_data_frames))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->bad_rcvd_frames))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->total_rcvd_control_frames))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->total_sent_control_frames))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->total_control_frame_send_fails))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->total_retransmitted_control_frames))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->no_control_frame_resources))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->no_peer_resources))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->no_tunnel_resources))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->no_session_resources))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->no_ppp_resources))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->too_many_tunnels))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->too_many_sessions))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->auth_fails))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->no_matching_tunnel_id_discards))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->no_matching_session_id_discards))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->mismatched_tunnel_ids))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->mismatched_session_ids))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->encode_message_fails))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->tunnel_setup_failures))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->session_setup_failures))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->event_queue_full_errors))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->ignored_avps))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->vendor_avps))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->illegal_messages))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->unsupported_messages))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->messages.messages_val, (u_int *) &objp->messages.messages_len, L2TP_API_MSG_TYPE_COUNT,
		sizeof (l2tp_api_system_msg_stats), (xdrproc_t) xdr_l2tp_api_system_msg_stats))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_system_status (XDR *xdrs, l2tp_api_system_status *objp)
{
	register int32_t *buf;

	 if (!xdr_l2tp_api_system_stats (xdrs, &objp->stats))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->num_tunnels))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->num_sessions))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_system_msg_data (XDR *xdrs, l2tp_api_system_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_l2tp_api_system_config (xdrs, &objp->config))
		 return FALSE;
	 if (!xdr_l2tp_api_system_status (xdrs, &objp->status))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_peer_msg_data (XDR *xdrs, l2tp_api_peer_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->local_addr))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_tunnels))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_peer_list_entry (XDR *xdrs, l2tp_api_peer_list_entry *objp)
{
	register int32_t *buf;

	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->local_addr))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (l2tp_api_peer_list_entry), (xdrproc_t) xdr_l2tp_api_peer_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_peer_list_msg_data (XDR *xdrs, l2tp_api_peer_list_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->peers, sizeof (l2tp_api_peer_list_entry), (xdrproc_t) xdr_l2tp_api_peer_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_peer_profile_msg_data (XDR *xdrs, l2tp_api_peer_profile_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->peer_port))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->we_can_be_lac))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->we_can_be_lns))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->default_tunnel_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->default_session_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->default_ppp_profile_name))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->netmask))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->use_count))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_peer_profile_list_entry (XDR *xdrs, l2tp_api_peer_profile_list_entry *objp)
{
	register int32_t *buf;

	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (l2tp_api_peer_profile_list_entry), (xdrproc_t) xdr_l2tp_api_peer_profile_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_peer_profile_list_msg_data (XDR *xdrs, l2tp_api_peer_profile_list_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_profiles))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->profiles, sizeof (l2tp_api_peer_profile_list_entry), (xdrproc_t) xdr_l2tp_api_peer_profile_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_peer_profile_unset_msg_data (XDR *xdrs, l2tp_api_peer_profile_unset_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_peer (XDR *xdrs, l2tp_api_tunnel_peer *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		buf = XDR_INLINE (xdrs, 4 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_cap_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->framing_cap_sync);
		IXDR_PUT_BOOL(buf, objp->framing_cap_async);
		IXDR_PUT_BOOL(buf, objp->bearer_cap_digital);
		IXDR_PUT_BOOL(buf, objp->bearer_cap_analog);
		}
		 if (!xdr_uint8_t (xdrs, &objp->protocol_version_ver))
			 return FALSE;
		 if (!xdr_uint8_t (xdrs, &objp->protocol_version_rev))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->firmware_revision))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->host_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->vendor_name))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->tiebreaker.tiebreaker_val, (u_int *) &objp->tiebreaker.tiebreaker_len, 8,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->result_code_result))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->result_code_error))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->result_code_message))
			 return FALSE;
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		buf = XDR_INLINE (xdrs, 4 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_cap_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
				 return FALSE;

		} else {
		objp->framing_cap_sync = IXDR_GET_BOOL(buf);
		objp->framing_cap_async = IXDR_GET_BOOL(buf);
		objp->bearer_cap_digital = IXDR_GET_BOOL(buf);
		objp->bearer_cap_analog = IXDR_GET_BOOL(buf);
		}
		 if (!xdr_uint8_t (xdrs, &objp->protocol_version_ver))
			 return FALSE;
		 if (!xdr_uint8_t (xdrs, &objp->protocol_version_rev))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->firmware_revision))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->host_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->vendor_name))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->tiebreaker.tiebreaker_val, (u_int *) &objp->tiebreaker.tiebreaker_len, 8,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->result_code_result))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->result_code_error))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->result_code_message))
			 return FALSE;
	 return TRUE;
	}

	 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_cap_async))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
		 return FALSE;
	 if (!xdr_uint8_t (xdrs, &objp->protocol_version_ver))
		 return FALSE;
	 if (!xdr_uint8_t (xdrs, &objp->protocol_version_rev))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->firmware_revision))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->host_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->vendor_name))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->tiebreaker.tiebreaker_val, (u_int *) &objp->tiebreaker.tiebreaker_len, 8,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->result_code_result))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->result_code_error))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->result_code_message))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_stats (XDR *xdrs, l2tp_api_tunnel_stats *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->retransmits))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->tx_zlbs))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->tx_zlb_fails))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->rx_zlbs))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->data_pkt_discards))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->duplicate_pkt_discards))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->rx_hellos))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->tx_hellos))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->tx_hello_fails))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->ns))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->nr))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->peer_ns))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->peer_nr))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->cwnd))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->ssthresh))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->congpkt_acc))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->control_rx_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->control_rx_bytes))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->control_rx_oos_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->control_rx_oos_discards))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->control_tx_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->control_tx_bytes))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_bytes))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_errors))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_oos_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_oos_discards))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_tx_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_tx_bytes))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_tx_errors))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->using_ipsec))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_msg_data (XDR *xdrs, l2tp_api_tunnel_msg_data *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->flags2))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->peer_tunnel_id))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->hide_avps))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->tunnel_name))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->our_addr))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->our_udp_port))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->peer_udp_port))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->config_id))
			 return FALSE;
		 if (!xdr_l2tp_api_tunnel_auth_mode (xdrs, &objp->auth_mode))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 8 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_cap_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_tiebreaker))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->allow_ppp_proxy))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_udp_checksums))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->created_by_admin))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->framing_cap_sync);
		IXDR_PUT_BOOL(buf, objp->framing_cap_async);
		IXDR_PUT_BOOL(buf, objp->bearer_cap_digital);
		IXDR_PUT_BOOL(buf, objp->bearer_cap_analog);
		IXDR_PUT_BOOL(buf, objp->use_tiebreaker);
		IXDR_PUT_BOOL(buf, objp->allow_ppp_proxy);
		IXDR_PUT_BOOL(buf, objp->use_udp_checksums);
		IXDR_PUT_BOOL(buf, objp->created_by_admin);
		}
		 if (!xdr_optstring (xdrs, &objp->create_time))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 4 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->max_sessions))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_sessions))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->use_count))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_establish_retries))
				 return FALSE;

		} else {
		IXDR_PUT_LONG(buf, objp->max_sessions);
		IXDR_PUT_LONG(buf, objp->num_sessions);
		IXDR_PUT_LONG(buf, objp->use_count);
		IXDR_PUT_LONG(buf, objp->num_establish_retries);
		}
		 if (!xdr_l2tp_api_tunnel_mode (xdrs, &objp->mode))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->hello_timeout))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->max_retries))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tx_window_size))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->actual_tx_window_size))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->retry_timeout))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->idle_timeout))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 3 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->persist))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->mtu))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->do_pmtu_discovery);
		IXDR_PUT_BOOL(buf, objp->persist);
		IXDR_PUT_LONG(buf, objp->mtu);
		}
		 if (!xdr_optstring (xdrs, &objp->state))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->secret))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->host_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->tunnel_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->peer_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->session_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->interface_name))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->tiebreaker.tiebreaker_val, (u_int *) &objp->tiebreaker.tiebreaker_len, 8,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->result_code_result))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->result_code_error))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->result_code_message))
			 return FALSE;
		 if (!xdr_l2tp_api_tunnel_peer (xdrs, &objp->peer))
			 return FALSE;
		 if (!xdr_l2tp_api_tunnel_stats (xdrs, &objp->stats))
			 return FALSE;
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->flags2))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->peer_tunnel_id))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->hide_avps))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->tunnel_name))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->our_addr))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->our_udp_port))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->peer_udp_port))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->config_id))
			 return FALSE;
		 if (!xdr_l2tp_api_tunnel_auth_mode (xdrs, &objp->auth_mode))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 8 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_cap_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_tiebreaker))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->allow_ppp_proxy))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_udp_checksums))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->created_by_admin))
				 return FALSE;

		} else {
		objp->framing_cap_sync = IXDR_GET_BOOL(buf);
		objp->framing_cap_async = IXDR_GET_BOOL(buf);
		objp->bearer_cap_digital = IXDR_GET_BOOL(buf);
		objp->bearer_cap_analog = IXDR_GET_BOOL(buf);
		objp->use_tiebreaker = IXDR_GET_BOOL(buf);
		objp->allow_ppp_proxy = IXDR_GET_BOOL(buf);
		objp->use_udp_checksums = IXDR_GET_BOOL(buf);
		objp->created_by_admin = IXDR_GET_BOOL(buf);
		}
		 if (!xdr_optstring (xdrs, &objp->create_time))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 4 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->max_sessions))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_sessions))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->use_count))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_establish_retries))
				 return FALSE;

		} else {
		objp->max_sessions = IXDR_GET_LONG(buf);
		objp->num_sessions = IXDR_GET_LONG(buf);
		objp->use_count = IXDR_GET_LONG(buf);
		objp->num_establish_retries = IXDR_GET_LONG(buf);
		}
		 if (!xdr_l2tp_api_tunnel_mode (xdrs, &objp->mode))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->hello_timeout))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->max_retries))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tx_window_size))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->actual_tx_window_size))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->retry_timeout))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->idle_timeout))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 3 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->persist))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->mtu))
				 return FALSE;

		} else {
		objp->do_pmtu_discovery = IXDR_GET_BOOL(buf);
		objp->persist = IXDR_GET_BOOL(buf);
		objp->mtu = IXDR_GET_LONG(buf);
		}
		 if (!xdr_optstring (xdrs, &objp->state))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->secret))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->host_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->tunnel_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->peer_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->session_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->interface_name))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->tiebreaker.tiebreaker_val, (u_int *) &objp->tiebreaker.tiebreaker_len, 8,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->result_code_result))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->result_code_error))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->result_code_message))
			 return FALSE;
		 if (!xdr_l2tp_api_tunnel_peer (xdrs, &objp->peer))
			 return FALSE;
		 if (!xdr_l2tp_api_tunnel_stats (xdrs, &objp->stats))
			 return FALSE;
	 return TRUE;
	}

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->flags2))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->peer_tunnel_id))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->hide_avps))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->tunnel_name))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->our_addr))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->our_udp_port))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->peer_udp_port))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->config_id))
		 return FALSE;
	 if (!xdr_l2tp_api_tunnel_auth_mode (xdrs, &objp->auth_mode))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_cap_async))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_tiebreaker))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->allow_ppp_proxy))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_udp_checksums))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->created_by_admin))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->create_time))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->max_sessions))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_sessions))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->use_count))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_establish_retries))
		 return FALSE;
	 if (!xdr_l2tp_api_tunnel_mode (xdrs, &objp->mode))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->hello_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->max_retries))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->tx_window_size))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->actual_tx_window_size))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->retry_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->idle_timeout))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->persist))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->mtu))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->state))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->secret))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->host_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->tunnel_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->peer_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->session_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->interface_name))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->tiebreaker.tiebreaker_val, (u_int *) &objp->tiebreaker.tiebreaker_len, 8,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->result_code_result))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->result_code_error))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->result_code_message))
		 return FALSE;
	 if (!xdr_l2tp_api_tunnel_peer (xdrs, &objp->peer))
		 return FALSE;
	 if (!xdr_l2tp_api_tunnel_stats (xdrs, &objp->stats))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_list_msg_data (XDR *xdrs, l2tp_api_tunnel_list_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->tunnel_ids.tunnel_ids_val, (u_int *) &objp->tunnel_ids.tunnel_ids_len, ~0,
		sizeof (uint16_t), (xdrproc_t) xdr_uint16_t))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_profile_msg_data (XDR *xdrs, l2tp_api_tunnel_profile_msg_data *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_string (xdrs, &objp->profile_name, ~0))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->hide_avps))
			 return FALSE;
		 if (!xdr_l2tp_api_tunnel_auth_mode (xdrs, &objp->auth_mode))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 9 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_cap_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_tiebreaker))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->allow_ppp_proxy))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_udp_checksums))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->hello_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->max_retries))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->framing_cap_sync);
		IXDR_PUT_BOOL(buf, objp->framing_cap_async);
		IXDR_PUT_BOOL(buf, objp->bearer_cap_digital);
		IXDR_PUT_BOOL(buf, objp->bearer_cap_analog);
		IXDR_PUT_BOOL(buf, objp->use_tiebreaker);
		IXDR_PUT_BOOL(buf, objp->allow_ppp_proxy);
		IXDR_PUT_BOOL(buf, objp->use_udp_checksums);
		IXDR_PUT_LONG(buf, objp->hello_timeout);
		IXDR_PUT_LONG(buf, objp->max_retries);
		}
		 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tx_window_size))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->retry_timeout))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->idle_timeout))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->max_sessions))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->our_addr))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->our_udp_port))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->peer_udp_port))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->mtu))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->peer_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->session_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->secret))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->host_name))
			 return FALSE;
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_string (xdrs, &objp->profile_name, ~0))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->hide_avps))
			 return FALSE;
		 if (!xdr_l2tp_api_tunnel_auth_mode (xdrs, &objp->auth_mode))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 9 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_cap_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_tiebreaker))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->allow_ppp_proxy))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_udp_checksums))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->hello_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->max_retries))
				 return FALSE;

		} else {
		objp->framing_cap_sync = IXDR_GET_BOOL(buf);
		objp->framing_cap_async = IXDR_GET_BOOL(buf);
		objp->bearer_cap_digital = IXDR_GET_BOOL(buf);
		objp->bearer_cap_analog = IXDR_GET_BOOL(buf);
		objp->use_tiebreaker = IXDR_GET_BOOL(buf);
		objp->allow_ppp_proxy = IXDR_GET_BOOL(buf);
		objp->use_udp_checksums = IXDR_GET_BOOL(buf);
		objp->hello_timeout = IXDR_GET_LONG(buf);
		objp->max_retries = IXDR_GET_LONG(buf);
		}
		 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tx_window_size))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->retry_timeout))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->idle_timeout))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->max_sessions))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->our_addr))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->our_udp_port))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->peer_udp_port))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->mtu))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->peer_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->session_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->secret))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->host_name))
			 return FALSE;
	 return TRUE;
	}

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->hide_avps))
		 return FALSE;
	 if (!xdr_l2tp_api_tunnel_auth_mode (xdrs, &objp->auth_mode))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_cap_sync))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_cap_async))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_cap_digital))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_cap_analog))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_tiebreaker))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->allow_ppp_proxy))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_udp_checksums))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->hello_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->max_retries))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->rx_window_size))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->tx_window_size))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->retry_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->idle_timeout))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->max_sessions))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->our_addr))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->our_udp_port))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->peer_udp_port))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->mtu))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->peer_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->session_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->secret))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->host_name))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_profile_list_entry (XDR *xdrs, l2tp_api_tunnel_profile_list_entry *objp)
{
	register int32_t *buf;

	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (l2tp_api_tunnel_profile_list_entry), (xdrproc_t) xdr_l2tp_api_tunnel_profile_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_profile_list_msg_data (XDR *xdrs, l2tp_api_tunnel_profile_list_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_profiles))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->profiles, sizeof (l2tp_api_tunnel_profile_list_entry), (xdrproc_t) xdr_l2tp_api_tunnel_profile_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_tunnel_profile_unset_msg_data (XDR *xdrs, l2tp_api_tunnel_profile_unset_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_proxy_auth_type (XDR *xdrs, l2tp_api_session_proxy_auth_type *objp)
{
	register int32_t *buf;

	 if (!xdr_enum (xdrs, (enum_t *) objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_call_errors (XDR *xdrs, l2tp_api_session_call_errors *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->crc_errors))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->framing_errors))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->hardware_overruns))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->buffer_overruns))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->timeout_errors))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->alignment_errors))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_stats (XDR *xdrs, l2tp_api_session_stats *objp)
{
	register int32_t *buf;

	 if (!xdr_uint64_t (xdrs, &objp->data_rx_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_bytes))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_errors))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_oos_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_rx_oos_discards))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_tx_packets))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_tx_bytes))
		 return FALSE;
	 if (!xdr_uint64_t (xdrs, &objp->data_tx_errors))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_peer_info (XDR *xdrs, l2tp_api_session_peer_info *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		 if (!xdr_uint16_t (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->error_code))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->error_message))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->minimum_bps))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->maximum_bps))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->connect_speed))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->rx_connect_speed))
			 return FALSE;
		 if (!xdr_l2tp_api_session_proxy_auth_type (xdrs, &objp->proxy_auth_type))
			 return FALSE;
		 if (!xdr_uint8_t (xdrs, &objp->proxy_auth_id))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->proxy_auth_name))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_challenge.proxy_auth_challenge_val, (u_int *) &objp->proxy_auth_challenge.proxy_auth_challenge_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_response.proxy_auth_response_val, (u_int *) &objp->proxy_auth_response.proxy_auth_response_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->private_group_id))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 5 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_type_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_type_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->sequencing_required))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->framing_type_sync);
		IXDR_PUT_BOOL(buf, objp->framing_type_async);
		IXDR_PUT_BOOL(buf, objp->bearer_type_digital);
		IXDR_PUT_BOOL(buf, objp->bearer_type_analog);
		IXDR_PUT_BOOL(buf, objp->sequencing_required);
		}
		 if (!xdr_uint32_t (xdrs, &objp->call_serial_number))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->physical_channel_id))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_val, (u_int *) &objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->last_sent_lcp_confreq.last_sent_lcp_confreq_val, (u_int *) &objp->last_sent_lcp_confreq.last_sent_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_val, (u_int *) &objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->calling_number))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->called_number))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->sub_address))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->q931_cause_code))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->q931_cause_msg))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->q931_advisory_msg))
			 return FALSE;
		 if (!xdr_l2tp_api_session_call_errors (xdrs, &objp->call_errors))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->send_accm))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->recv_accm))
			 return FALSE;
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		 if (!xdr_uint16_t (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->error_code))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->error_message))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->minimum_bps))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->maximum_bps))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->connect_speed))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->rx_connect_speed))
			 return FALSE;
		 if (!xdr_l2tp_api_session_proxy_auth_type (xdrs, &objp->proxy_auth_type))
			 return FALSE;
		 if (!xdr_uint8_t (xdrs, &objp->proxy_auth_id))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->proxy_auth_name))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_challenge.proxy_auth_challenge_val, (u_int *) &objp->proxy_auth_challenge.proxy_auth_challenge_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_response.proxy_auth_response_val, (u_int *) &objp->proxy_auth_response.proxy_auth_response_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->private_group_id))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 5 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_type_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_type_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->sequencing_required))
				 return FALSE;

		} else {
		objp->framing_type_sync = IXDR_GET_BOOL(buf);
		objp->framing_type_async = IXDR_GET_BOOL(buf);
		objp->bearer_type_digital = IXDR_GET_BOOL(buf);
		objp->bearer_type_analog = IXDR_GET_BOOL(buf);
		objp->sequencing_required = IXDR_GET_BOOL(buf);
		}
		 if (!xdr_uint32_t (xdrs, &objp->call_serial_number))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->physical_channel_id))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_val, (u_int *) &objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->last_sent_lcp_confreq.last_sent_lcp_confreq_val, (u_int *) &objp->last_sent_lcp_confreq.last_sent_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_val, (u_int *) &objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->calling_number))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->called_number))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->sub_address))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->q931_cause_code))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->q931_cause_msg))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->q931_advisory_msg))
			 return FALSE;
		 if (!xdr_l2tp_api_session_call_errors (xdrs, &objp->call_errors))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->send_accm))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->recv_accm))
			 return FALSE;
	 return TRUE;
	}

	 if (!xdr_uint16_t (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->error_code))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->error_message))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->minimum_bps))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->maximum_bps))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->connect_speed))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->rx_connect_speed))
		 return FALSE;
	 if (!xdr_l2tp_api_session_proxy_auth_type (xdrs, &objp->proxy_auth_type))
		 return FALSE;
	 if (!xdr_uint8_t (xdrs, &objp->proxy_auth_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->proxy_auth_name))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_challenge.proxy_auth_challenge_val, (u_int *) &objp->proxy_auth_challenge.proxy_auth_challenge_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_response.proxy_auth_response_val, (u_int *) &objp->proxy_auth_response.proxy_auth_response_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->private_group_id))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_type_sync))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_type_async))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->sequencing_required))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->call_serial_number))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->physical_channel_id))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_val, (u_int *) &objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->last_sent_lcp_confreq.last_sent_lcp_confreq_val, (u_int *) &objp->last_sent_lcp_confreq.last_sent_lcp_confreq_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_val, (u_int *) &objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->calling_number))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->called_number))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->sub_address))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->q931_cause_code))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->q931_cause_msg))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->q931_advisory_msg))
		 return FALSE;
	 if (!xdr_l2tp_api_session_call_errors (xdrs, &objp->call_errors))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->send_accm))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->recv_accm))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_type (XDR *xdrs, l2tp_api_session_type *objp)
{
	register int32_t *buf;

	 if (!xdr_enum (xdrs, (enum_t *) objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_msg_data (XDR *xdrs, l2tp_api_session_msg_data *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->session_id))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->tunnel_name))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->peer_session_id))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->state))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->session_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->interface_name))
			 return FALSE;
		 if (!xdr_l2tp_api_session_type (xdrs, &objp->session_type))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->user_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->user_password))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->priv_group_id))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->profile_name))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->created_by_admin))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->create_time))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 8 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->no_ppp))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->sequencing_required))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_sequence_numbers))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->reorder_timeout))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_type_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_type_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->no_ppp);
		IXDR_PUT_BOOL(buf, objp->sequencing_required);
		IXDR_PUT_BOOL(buf, objp->use_sequence_numbers);
		IXDR_PUT_LONG(buf, objp->reorder_timeout);
		IXDR_PUT_BOOL(buf, objp->framing_type_sync);
		IXDR_PUT_BOOL(buf, objp->framing_type_async);
		IXDR_PUT_BOOL(buf, objp->bearer_type_digital);
		IXDR_PUT_BOOL(buf, objp->bearer_type_analog);
		}
		 if (!xdr_uint32_t (xdrs, &objp->call_serial_number))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->physical_channel_id))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 4 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->minimum_bps))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->maximum_bps))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->tx_connect_speed))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->rx_connect_speed))
				 return FALSE;

		} else {
		IXDR_PUT_LONG(buf, objp->minimum_bps);
		IXDR_PUT_LONG(buf, objp->maximum_bps);
		IXDR_PUT_LONG(buf, objp->tx_connect_speed);
		IXDR_PUT_LONG(buf, objp->rx_connect_speed);
		}
		 if (!xdr_l2tp_api_session_peer_info (xdrs, &objp->peer))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
			 return FALSE;
		 if (!xdr_l2tp_api_session_stats (xdrs, &objp->stats))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->use_ppp_proxy))
			 return FALSE;
		 if (!xdr_l2tp_api_session_proxy_auth_type (xdrs, &objp->proxy_auth_type))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->proxy_auth_name))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_challenge.proxy_auth_challenge_val, (u_int *) &objp->proxy_auth_challenge.proxy_auth_challenge_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_response.proxy_auth_response_val, (u_int *) &objp->proxy_auth_response.proxy_auth_response_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->calling_number))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->called_number))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->sub_address))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_val, (u_int *) &objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->last_sent_lcp_confreq.last_sent_lcp_confreq_val, (u_int *) &objp->last_sent_lcp_confreq.last_sent_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_val, (u_int *) &objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->session_id))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->tunnel_name))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->peer_session_id))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->state))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->session_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->interface_name))
			 return FALSE;
		 if (!xdr_l2tp_api_session_type (xdrs, &objp->session_type))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->user_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->user_password))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->priv_group_id))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->profile_name))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->created_by_admin))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->create_time))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 8 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->no_ppp))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->sequencing_required))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_sequence_numbers))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->reorder_timeout))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_type_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_type_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
				 return FALSE;

		} else {
		objp->no_ppp = IXDR_GET_BOOL(buf);
		objp->sequencing_required = IXDR_GET_BOOL(buf);
		objp->use_sequence_numbers = IXDR_GET_BOOL(buf);
		objp->reorder_timeout = IXDR_GET_LONG(buf);
		objp->framing_type_sync = IXDR_GET_BOOL(buf);
		objp->framing_type_async = IXDR_GET_BOOL(buf);
		objp->bearer_type_digital = IXDR_GET_BOOL(buf);
		objp->bearer_type_analog = IXDR_GET_BOOL(buf);
		}
		 if (!xdr_uint32_t (xdrs, &objp->call_serial_number))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->physical_channel_id))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 4 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->minimum_bps))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->maximum_bps))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->tx_connect_speed))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->rx_connect_speed))
				 return FALSE;

		} else {
		objp->minimum_bps = IXDR_GET_LONG(buf);
		objp->maximum_bps = IXDR_GET_LONG(buf);
		objp->tx_connect_speed = IXDR_GET_LONG(buf);
		objp->rx_connect_speed = IXDR_GET_LONG(buf);
		}
		 if (!xdr_l2tp_api_session_peer_info (xdrs, &objp->peer))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
			 return FALSE;
		 if (!xdr_l2tp_api_session_stats (xdrs, &objp->stats))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->use_ppp_proxy))
			 return FALSE;
		 if (!xdr_l2tp_api_session_proxy_auth_type (xdrs, &objp->proxy_auth_type))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->proxy_auth_name))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_challenge.proxy_auth_challenge_val, (u_int *) &objp->proxy_auth_challenge.proxy_auth_challenge_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_response.proxy_auth_response_val, (u_int *) &objp->proxy_auth_response.proxy_auth_response_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->calling_number))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->called_number))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->sub_address))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_val, (u_int *) &objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->last_sent_lcp_confreq.last_sent_lcp_confreq_val, (u_int *) &objp->last_sent_lcp_confreq.last_sent_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
		 if (!xdr_array (xdrs, (char **)&objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_val, (u_int *) &objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_len, ~0,
			sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
			 return FALSE;
	 return TRUE;
	}

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->session_id))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->tunnel_name))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->peer_session_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->state))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->session_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->interface_name))
		 return FALSE;
	 if (!xdr_l2tp_api_session_type (xdrs, &objp->session_type))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->user_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->user_password))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->priv_group_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->profile_name))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->created_by_admin))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->create_time))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->no_ppp))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->sequencing_required))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_sequence_numbers))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->reorder_timeout))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_type_sync))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_type_async))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->call_serial_number))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->physical_channel_id))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->minimum_bps))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->maximum_bps))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->tx_connect_speed))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->rx_connect_speed))
		 return FALSE;
	 if (!xdr_l2tp_api_session_peer_info (xdrs, &objp->peer))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
		 return FALSE;
	 if (!xdr_l2tp_api_session_stats (xdrs, &objp->stats))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_ppp_proxy))
		 return FALSE;
	 if (!xdr_l2tp_api_session_proxy_auth_type (xdrs, &objp->proxy_auth_type))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->proxy_auth_name))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_challenge.proxy_auth_challenge_val, (u_int *) &objp->proxy_auth_challenge.proxy_auth_challenge_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->proxy_auth_response.proxy_auth_response_val, (u_int *) &objp->proxy_auth_response.proxy_auth_response_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->calling_number))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->called_number))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->sub_address))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_val, (u_int *) &objp->initial_rcvd_lcp_confreq.initial_rcvd_lcp_confreq_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->last_sent_lcp_confreq.last_sent_lcp_confreq_val, (u_int *) &objp->last_sent_lcp_confreq.last_sent_lcp_confreq_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_val, (u_int *) &objp->last_rcvd_lcp_confreq.last_rcvd_lcp_confreq_len, ~0,
		sizeof (uint8_t), (xdrproc_t) xdr_uint8_t))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_list_msg_data (XDR *xdrs, l2tp_api_session_list_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->session_ids.session_ids_val, (u_int *) &objp->session_ids.session_ids_len, ~0,
		sizeof (uint16_t), (xdrproc_t) xdr_uint16_t))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_incall_msg_data (XDR *xdrs, l2tp_api_session_incall_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->ppp_unit))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->tunnel_profile_name, ~0))
		 return FALSE;
	 if (!xdr_l2tp_api_session_msg_data (xdrs, &objp->session))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_profile_msg_data (XDR *xdrs, l2tp_api_session_profile_msg_data *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_string (xdrs, &objp->profile_name, ~0))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 7 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->sequencing_required))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_sequence_numbers))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->no_ppp))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->reorder_timeout))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->mtu))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->mru))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->sequencing_required);
		IXDR_PUT_BOOL(buf, objp->use_sequence_numbers);
		IXDR_PUT_BOOL(buf, objp->no_ppp);
		IXDR_PUT_LONG(buf, objp->reorder_timeout);
		IXDR_PUT_BOOL(buf, objp->do_pmtu_discovery);
		IXDR_PUT_LONG(buf, objp->mtu);
		IXDR_PUT_LONG(buf, objp->mru);
		}
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
			 return FALSE;
		 if (!xdr_l2tp_api_session_type (xdrs, &objp->session_type))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->priv_group_id))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 9 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_type_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_type_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->minimum_bps))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->maximum_bps))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->tx_connect_speed))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->rx_connect_speed))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_ppp_proxy))
				 return FALSE;
		} else {
			IXDR_PUT_BOOL(buf, objp->framing_type_sync);
			IXDR_PUT_BOOL(buf, objp->framing_type_async);
			IXDR_PUT_BOOL(buf, objp->bearer_type_digital);
			IXDR_PUT_BOOL(buf, objp->bearer_type_analog);
			IXDR_PUT_LONG(buf, objp->minimum_bps);
			IXDR_PUT_LONG(buf, objp->maximum_bps);
			IXDR_PUT_LONG(buf, objp->tx_connect_speed);
			IXDR_PUT_LONG(buf, objp->rx_connect_speed);
			IXDR_PUT_BOOL(buf, objp->use_ppp_proxy);
		}
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_string (xdrs, &objp->profile_name, ~0))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 7 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->sequencing_required))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_sequence_numbers))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->no_ppp))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->reorder_timeout))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->mtu))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->mru))
				 return FALSE;

		} else {
		objp->sequencing_required = IXDR_GET_BOOL(buf);
		objp->use_sequence_numbers = IXDR_GET_BOOL(buf);
		objp->no_ppp = IXDR_GET_BOOL(buf);
		objp->reorder_timeout = IXDR_GET_LONG(buf);
		objp->do_pmtu_discovery = IXDR_GET_BOOL(buf);
		objp->mtu = IXDR_GET_LONG(buf);
		objp->mru = IXDR_GET_LONG(buf);
		}
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
			 return FALSE;
		 if (!xdr_l2tp_api_session_type (xdrs, &objp->session_type))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->priv_group_id))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 9 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->framing_type_sync))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->framing_type_async))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->minimum_bps))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->maximum_bps))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->tx_connect_speed))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->rx_connect_speed))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->use_ppp_proxy))
				 return FALSE;
		} else {
			objp->framing_type_sync = IXDR_GET_BOOL(buf);
			objp->framing_type_async = IXDR_GET_BOOL(buf);
			objp->bearer_type_digital = IXDR_GET_BOOL(buf);
			objp->bearer_type_analog = IXDR_GET_BOOL(buf);
			objp->minimum_bps = IXDR_GET_LONG(buf);
			objp->maximum_bps = IXDR_GET_LONG(buf);
			objp->tx_connect_speed = IXDR_GET_LONG(buf);
			objp->rx_connect_speed = IXDR_GET_LONG(buf);
			objp->use_ppp_proxy = IXDR_GET_BOOL(buf);
		}
	 return TRUE;
	}

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->sequencing_required))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_sequence_numbers))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->no_ppp))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->reorder_timeout))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->do_pmtu_discovery))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->mtu))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->mru))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->ppp_profile_name))
		 return FALSE;
	 if (!xdr_l2tp_api_session_type (xdrs, &objp->session_type))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->priv_group_id))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_type_sync))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->framing_type_async))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_type_digital))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->bearer_type_analog))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->minimum_bps))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->maximum_bps))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->tx_connect_speed))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->rx_connect_speed))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_ppp_proxy))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_profile_list_entry (XDR *xdrs, l2tp_api_session_profile_list_entry *objp)
{
	register int32_t *buf;

	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (l2tp_api_session_profile_list_entry), (xdrproc_t) xdr_l2tp_api_session_profile_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_profile_list_msg_data (XDR *xdrs, l2tp_api_session_profile_list_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_profiles))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->profiles, sizeof (l2tp_api_session_profile_list_entry), (xdrproc_t) xdr_l2tp_api_session_profile_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_session_profile_unset_msg_data (XDR *xdrs, l2tp_api_session_profile_unset_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_ppp_sync_mode (XDR *xdrs, l2tp_api_ppp_sync_mode *objp)
{
	register int32_t *buf;

	 if (!xdr_enum (xdrs, (enum_t *) objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_ppp_profile_msg_data (XDR *xdrs, l2tp_api_ppp_profile_msg_data *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->flags2))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		 if (!xdr_string (xdrs, &objp->profile_name, ~0))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->asyncmap))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->mru))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->mtu))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 7 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->auth_none))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_peer))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_pap))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_chap))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_mschap))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_mschapv2))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_eap))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->auth_none);
		IXDR_PUT_BOOL(buf, objp->auth_peer);
		IXDR_PUT_BOOL(buf, objp->auth_refuse_pap);
		IXDR_PUT_BOOL(buf, objp->auth_refuse_chap);
		IXDR_PUT_BOOL(buf, objp->auth_refuse_mschap);
		IXDR_PUT_BOOL(buf, objp->auth_refuse_mschapv2);
		IXDR_PUT_BOOL(buf, objp->auth_refuse_eap);
		}
		 if (!xdr_l2tp_api_ppp_sync_mode (xdrs, &objp->sync_mode))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 19 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->chap_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->chap_max_challenge))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->chap_restart))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->pap_max_auth_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->pap_restart_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->pap_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->idle_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->ipcp_max_config_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->ipcp_max_config_naks))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->ipcp_max_terminate_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->ipcp_retransmit_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_echo_failure_count))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_echo_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_max_config_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_max_config_naks))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_max_terminate_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_retransmit_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->max_connect_time))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->max_failure_count))
				 return FALSE;

		} else {
		IXDR_PUT_LONG(buf, objp->chap_interval);
		IXDR_PUT_LONG(buf, objp->chap_max_challenge);
		IXDR_PUT_LONG(buf, objp->chap_restart);
		IXDR_PUT_LONG(buf, objp->pap_max_auth_requests);
		IXDR_PUT_LONG(buf, objp->pap_restart_interval);
		IXDR_PUT_LONG(buf, objp->pap_timeout);
		IXDR_PUT_LONG(buf, objp->idle_timeout);
		IXDR_PUT_LONG(buf, objp->ipcp_max_config_requests);
		IXDR_PUT_LONG(buf, objp->ipcp_max_config_naks);
		IXDR_PUT_LONG(buf, objp->ipcp_max_terminate_requests);
		IXDR_PUT_LONG(buf, objp->ipcp_retransmit_interval);
		IXDR_PUT_LONG(buf, objp->lcp_echo_failure_count);
		IXDR_PUT_LONG(buf, objp->lcp_echo_interval);
		IXDR_PUT_LONG(buf, objp->lcp_max_config_requests);
		IXDR_PUT_LONG(buf, objp->lcp_max_config_naks);
		IXDR_PUT_LONG(buf, objp->lcp_max_terminate_requests);
		IXDR_PUT_LONG(buf, objp->lcp_retransmit_interval);
		IXDR_PUT_LONG(buf, objp->max_connect_time);
		IXDR_PUT_LONG(buf, objp->max_failure_count);
		}
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->local_ip_addr))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_ip_addr))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->dns_addr_1))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->dns_addr_2))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->wins_addr_1))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->wins_addr_2))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ip_pool_name))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->use_radius))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->radius_hint))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->use_as_default_route))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->multilink))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->local_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->remote_name))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->proxy_arp))
			 return FALSE;
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->flags2))
			 return FALSE;
		 if (!xdr_int (xdrs, &objp->result_code))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
			 return FALSE;
		 if (!xdr_string (xdrs, &objp->profile_name, ~0))
			 return FALSE;
		 if (!xdr_uint32_t (xdrs, &objp->asyncmap))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->mru))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->mtu))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 7 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->auth_none))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_peer))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_pap))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_chap))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_mschap))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_mschapv2))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->auth_refuse_eap))
				 return FALSE;

		} else {
		objp->auth_none = IXDR_GET_BOOL(buf);
		objp->auth_peer = IXDR_GET_BOOL(buf);
		objp->auth_refuse_pap = IXDR_GET_BOOL(buf);
		objp->auth_refuse_chap = IXDR_GET_BOOL(buf);
		objp->auth_refuse_mschap = IXDR_GET_BOOL(buf);
		objp->auth_refuse_mschapv2 = IXDR_GET_BOOL(buf);
		objp->auth_refuse_eap = IXDR_GET_BOOL(buf);
		}
		 if (!xdr_l2tp_api_ppp_sync_mode (xdrs, &objp->sync_mode))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 19 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->chap_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->chap_max_challenge))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->chap_restart))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->pap_max_auth_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->pap_restart_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->pap_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->idle_timeout))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->ipcp_max_config_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->ipcp_max_config_naks))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->ipcp_max_terminate_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->ipcp_retransmit_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_echo_failure_count))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_echo_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_max_config_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_max_config_naks))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_max_terminate_requests))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->lcp_retransmit_interval))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->max_connect_time))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->max_failure_count))
				 return FALSE;

		} else {
		objp->chap_interval = IXDR_GET_LONG(buf);
		objp->chap_max_challenge = IXDR_GET_LONG(buf);
		objp->chap_restart = IXDR_GET_LONG(buf);
		objp->pap_max_auth_requests = IXDR_GET_LONG(buf);
		objp->pap_restart_interval = IXDR_GET_LONG(buf);
		objp->pap_timeout = IXDR_GET_LONG(buf);
		objp->idle_timeout = IXDR_GET_LONG(buf);
		objp->ipcp_max_config_requests = IXDR_GET_LONG(buf);
		objp->ipcp_max_config_naks = IXDR_GET_LONG(buf);
		objp->ipcp_max_terminate_requests = IXDR_GET_LONG(buf);
		objp->ipcp_retransmit_interval = IXDR_GET_LONG(buf);
		objp->lcp_echo_failure_count = IXDR_GET_LONG(buf);
		objp->lcp_echo_interval = IXDR_GET_LONG(buf);
		objp->lcp_max_config_requests = IXDR_GET_LONG(buf);
		objp->lcp_max_config_naks = IXDR_GET_LONG(buf);
		objp->lcp_max_terminate_requests = IXDR_GET_LONG(buf);
		objp->lcp_retransmit_interval = IXDR_GET_LONG(buf);
		objp->max_connect_time = IXDR_GET_LONG(buf);
		objp->max_failure_count = IXDR_GET_LONG(buf);
		}
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->local_ip_addr))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_ip_addr))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->dns_addr_1))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->dns_addr_2))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->wins_addr_1))
			 return FALSE;
		 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->wins_addr_2))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->ip_pool_name))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->use_radius))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->radius_hint))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->use_as_default_route))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->multilink))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->local_name))
			 return FALSE;
		 if (!xdr_optstring (xdrs, &objp->remote_name))
			 return FALSE;
		 if (!xdr_bool (xdrs, &objp->proxy_arp))
			 return FALSE;
	 return TRUE;
	}

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->flags2))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->trace_flags_mask))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->asyncmap))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->mru))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->mtu))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->auth_none))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->auth_peer))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->auth_refuse_pap))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->auth_refuse_chap))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->auth_refuse_mschap))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->auth_refuse_mschapv2))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->auth_refuse_eap))
		 return FALSE;
	 if (!xdr_l2tp_api_ppp_sync_mode (xdrs, &objp->sync_mode))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->chap_interval))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->chap_max_challenge))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->chap_restart))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->pap_max_auth_requests))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->pap_restart_interval))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->pap_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->idle_timeout))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->ipcp_max_config_requests))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->ipcp_max_config_naks))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->ipcp_max_terminate_requests))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->ipcp_retransmit_interval))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->lcp_echo_failure_count))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->lcp_echo_interval))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->lcp_max_config_requests))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->lcp_max_config_naks))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->lcp_max_terminate_requests))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->lcp_retransmit_interval))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->max_connect_time))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->max_failure_count))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->local_ip_addr))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_ip_addr))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->dns_addr_1))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->dns_addr_2))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->wins_addr_1))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->wins_addr_2))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->ip_pool_name))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_radius))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->radius_hint))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->use_as_default_route))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->multilink))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->local_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->remote_name))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->proxy_arp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_ppp_profile_list_entry (XDR *xdrs, l2tp_api_ppp_profile_list_entry *objp)
{
	register int32_t *buf;

	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (l2tp_api_ppp_profile_list_entry), (xdrproc_t) xdr_l2tp_api_ppp_profile_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_ppp_profile_list_msg_data (XDR *xdrs, l2tp_api_ppp_profile_list_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_profiles))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->profiles, sizeof (l2tp_api_ppp_profile_list_entry), (xdrproc_t) xdr_l2tp_api_ppp_profile_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_ppp_profile_unset_msg_data (XDR *xdrs, l2tp_api_ppp_profile_unset_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->flags2))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->result_code))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->profile_name, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_user_list_entry (XDR *xdrs, l2tp_api_user_list_entry *objp)
{
	register int32_t *buf;

	 if (!xdr_string (xdrs, &objp->user_name, ~0))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->create_time, ~0))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->created_by_admin))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->session_id))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (l2tp_api_user_list_entry), (xdrproc_t) xdr_l2tp_api_user_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_user_list_msg_data (XDR *xdrs, l2tp_api_user_list_msg_data *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->result))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_users))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->users, sizeof (l2tp_api_user_list_entry), (xdrproc_t) xdr_l2tp_api_user_list_entry))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_test_trigger_type (XDR *xdrs, l2tp_api_test_trigger_type *objp)
{
	register int32_t *buf;

	 if (!xdr_enum (xdrs, (enum_t *) objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_api_test_msg_data (XDR *xdrs, l2tp_api_test_msg_data *objp)
{
	register int32_t *buf;


	if (xdrs->x_op == XDR_ENCODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 9 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->fake_rx_drop))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->fake_tx_drop))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->fake_trigger_fired))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->hold_tunnels))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->hold_sessions))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->no_random_ids))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->show_profile_usage))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_rx_drops))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_tx_drops))
				 return FALSE;

		} else {
		IXDR_PUT_BOOL(buf, objp->fake_rx_drop);
		IXDR_PUT_BOOL(buf, objp->fake_tx_drop);
		IXDR_PUT_BOOL(buf, objp->fake_trigger_fired);
		IXDR_PUT_BOOL(buf, objp->hold_tunnels);
		IXDR_PUT_BOOL(buf, objp->hold_sessions);
		IXDR_PUT_BOOL(buf, objp->no_random_ids);
		IXDR_PUT_BOOL(buf, objp->show_profile_usage);
		IXDR_PUT_LONG(buf, objp->num_rx_drops);
		IXDR_PUT_LONG(buf, objp->num_tx_drops);
		}
		 if (!xdr_l2tp_api_test_trigger_type (xdrs, &objp->fake_trigger_type))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->session_id))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 6 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->num_tunnel_id_hash_hits))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_tunnel_id_hash_misses))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_tunnel_name_hash_hits))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_tunnel_name_hash_misses))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_session_id_hash_hits))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_session_id_hash_misses))
				 return FALSE;
		} else {
			IXDR_PUT_LONG(buf, objp->num_tunnel_id_hash_hits);
			IXDR_PUT_LONG(buf, objp->num_tunnel_id_hash_misses);
			IXDR_PUT_LONG(buf, objp->num_tunnel_name_hash_hits);
			IXDR_PUT_LONG(buf, objp->num_tunnel_name_hash_misses);
			IXDR_PUT_LONG(buf, objp->num_session_id_hash_hits);
			IXDR_PUT_LONG(buf, objp->num_session_id_hash_misses);
		}
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
		 if (!xdr_uint32_t (xdrs, &objp->flags))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 9 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_bool (xdrs, &objp->fake_rx_drop))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->fake_tx_drop))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->fake_trigger_fired))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->hold_tunnels))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->hold_sessions))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->no_random_ids))
				 return FALSE;
			 if (!xdr_bool (xdrs, &objp->show_profile_usage))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_rx_drops))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_tx_drops))
				 return FALSE;

		} else {
		objp->fake_rx_drop = IXDR_GET_BOOL(buf);
		objp->fake_tx_drop = IXDR_GET_BOOL(buf);
		objp->fake_trigger_fired = IXDR_GET_BOOL(buf);
		objp->hold_tunnels = IXDR_GET_BOOL(buf);
		objp->hold_sessions = IXDR_GET_BOOL(buf);
		objp->no_random_ids = IXDR_GET_BOOL(buf);
		objp->show_profile_usage = IXDR_GET_BOOL(buf);
		objp->num_rx_drops = IXDR_GET_LONG(buf);
		objp->num_tx_drops = IXDR_GET_LONG(buf);
		}
		 if (!xdr_l2tp_api_test_trigger_type (xdrs, &objp->fake_trigger_type))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
			 return FALSE;
		 if (!xdr_uint16_t (xdrs, &objp->session_id))
			 return FALSE;
		buf = XDR_INLINE (xdrs, 6 * BYTES_PER_XDR_UNIT);
		if (buf == NULL) {
			 if (!xdr_int (xdrs, &objp->num_tunnel_id_hash_hits))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_tunnel_id_hash_misses))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_tunnel_name_hash_hits))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_tunnel_name_hash_misses))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_session_id_hash_hits))
				 return FALSE;
			 if (!xdr_int (xdrs, &objp->num_session_id_hash_misses))
				 return FALSE;
		} else {
			objp->num_tunnel_id_hash_hits = IXDR_GET_LONG(buf);
			objp->num_tunnel_id_hash_misses = IXDR_GET_LONG(buf);
			objp->num_tunnel_name_hash_hits = IXDR_GET_LONG(buf);
			objp->num_tunnel_name_hash_misses = IXDR_GET_LONG(buf);
			objp->num_session_id_hash_hits = IXDR_GET_LONG(buf);
			objp->num_session_id_hash_misses = IXDR_GET_LONG(buf);
		}
	 return TRUE;
	}

	 if (!xdr_uint32_t (xdrs, &objp->flags))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->fake_rx_drop))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->fake_tx_drop))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->fake_trigger_fired))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->hold_tunnels))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->hold_sessions))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->no_random_ids))
		 return FALSE;
	 if (!xdr_bool (xdrs, &objp->show_profile_usage))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_rx_drops))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_tx_drops))
		 return FALSE;
	 if (!xdr_l2tp_api_test_trigger_type (xdrs, &objp->fake_trigger_type))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->session_id))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_tunnel_id_hash_hits))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_tunnel_id_hash_misses))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_tunnel_name_hash_hits))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_tunnel_name_hash_misses))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_session_id_hash_hits))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->num_session_id_hash_misses))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_tunnel_delete_1_argument (XDR *xdrs, l2tp_tunnel_delete_1_argument *objp)
{
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->tunnel_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->reason))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_tunnel_get_1_argument (XDR *xdrs, l2tp_tunnel_get_1_argument *objp)
{
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->tunnel_name))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_session_delete_1_argument (XDR *xdrs, l2tp_session_delete_1_argument *objp)
{
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->tunnel_name))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->session_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->session_name))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->reason))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_session_get_1_argument (XDR *xdrs, l2tp_session_get_1_argument *objp)
{
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->tunnel_name))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->session_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->session_name))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_session_list_1_argument (XDR *xdrs, l2tp_session_list_1_argument *objp)
{
	 if (!xdr_uint16_t (xdrs, &objp->tunnel_id))
		 return FALSE;
	 if (!xdr_optstring (xdrs, &objp->tunnel_name))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_l2tp_peer_get_1_argument (XDR *xdrs, l2tp_peer_get_1_argument *objp)
{
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->local_addr))
		 return FALSE;
	 if (!xdr_l2tp_api_ip_addr (xdrs, &objp->peer_addr))
		 return FALSE;
	return TRUE;
}
