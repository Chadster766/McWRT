--- a/drivers/leds/Kconfig
+++ b/drivers/leds/Kconfig
@@ -204,6 +204,13 @@ config LEDS_LP5523
 	  Driver provides direct control via LED class and interface for
 	  programming the engines.
 
+config LEDS_LATCH
+	tristate "LED Support for Memory Latched LEDs"
+	depends on LEDS_CLASS
+	help
+		-- To Do --
+
+
 config LEDS_CLEVO_MAIL
 	tristate "Mail LED on Clevo notebook"
 	depends on LEDS_CLASS
--- /dev/null
+++ b/drivers/leds/leds-latch.c
@@ -0,0 +1,152 @@
+/*
+ * LEDs driver for Memory Latched Devices
+ *
+ * Copyright (C) 2008 Gateworks Corp.
+ * Chris Lang <clang@gateworks.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/workqueue.h>
+#include <asm/io.h>
+#include <linux/spinlock.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/export.h>
+
+static unsigned int mem_keep = 0xFF;
+static spinlock_t mem_lock;
+static unsigned char *iobase;
+
+struct latch_led_data {
+	struct led_classdev cdev;
+	struct work_struct work;
+	u8 new_level;
+	u8 bit;
+	void (*set_led)(u8 bit, enum led_brightness value);
+};
+
+static void latch_set_led(u8 bit, enum led_brightness value)
+{
+	if (value == LED_OFF)
+		mem_keep |= (0x1 << bit);
+	else
+		mem_keep &= ~(0x1 << bit);
+
+	writeb(mem_keep, iobase);
+}
+
+static void latch_led_set(struct led_classdev *led_cdev,
+	enum led_brightness value)
+{
+	struct latch_led_data *led_dat =
+		container_of(led_cdev, struct latch_led_data, cdev);
+
+	raw_spin_lock(mem_lock);
+
+	led_dat->set_led(led_dat->bit, value);
+
+	raw_spin_unlock(mem_lock);
+}
+
+static int latch_led_probe(struct platform_device *pdev)
+{
+	struct latch_led_platform_data *pdata = pdev->dev.platform_data;
+	struct latch_led *cur_led;
+	struct latch_led_data *leds_data, *led_dat;
+	int i, ret = 0;
+
+	if (!pdata)
+		return -EBUSY;
+
+	leds_data = kzalloc(sizeof(struct latch_led_data) * pdata->num_leds,
+				GFP_KERNEL);
+	if (!leds_data)
+		return -ENOMEM;
+
+	for (i = 0; i < pdata->num_leds; i++) {
+		cur_led = &pdata->leds[i];
+		led_dat = &leds_data[i];
+
+		led_dat->cdev.name = cur_led->name;
+		led_dat->cdev.default_trigger = cur_led->default_trigger;
+		led_dat->cdev.brightness_set = latch_led_set;
+		led_dat->cdev.brightness = LED_OFF;
+		led_dat->bit = cur_led->bit;
+		led_dat->set_led = pdata->set_led ? pdata->set_led : latch_set_led;
+
+		ret = led_classdev_register(&pdev->dev, &led_dat->cdev);
+		if (ret < 0) {
+			goto err;
+		}
+	}
+
+	if (!pdata->set_led) {
+		iobase = ioremap_nocache(pdata->mem, 0x1000);
+		writeb(0xFF, iobase);
+	}
+	platform_set_drvdata(pdev, leds_data);
+
+	return 0;
+
+err:
+	if (i > 0) {
+		for (i = i - 1; i >= 0; i--) {
+			led_classdev_unregister(&leds_data[i].cdev);
+		}
+	}
+
+	kfree(leds_data);
+
+	return ret;
+}
+
+static int __devexit latch_led_remove(struct platform_device *pdev)
+{
+	int i;
+	struct latch_led_platform_data *pdata = pdev->dev.platform_data;
+	struct latch_led_data *leds_data;
+
+	leds_data = platform_get_drvdata(pdev);
+
+	for (i = 0; i < pdata->num_leds; i++) {
+		led_classdev_unregister(&leds_data[i].cdev);
+		cancel_work_sync(&leds_data[i].work);
+	}
+
+	kfree(leds_data);
+
+	return 0;
+}
+
+static struct platform_driver latch_led_driver = {
+	.probe		= latch_led_probe,
+	.remove		= __devexit_p(latch_led_remove),
+	.driver		= {
+		.name	= "leds-latch",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init latch_led_init(void)
+{
+	return platform_driver_register(&latch_led_driver);
+}
+
+static void __exit latch_led_exit(void)
+{
+	platform_driver_unregister(&latch_led_driver);
+}
+
+module_init(latch_led_init);
+module_exit(latch_led_exit);
+
+MODULE_AUTHOR("Chris Lang <clang@gateworks.com>");
+MODULE_DESCRIPTION("Latch LED driver");
--- a/drivers/leds/Makefile
+++ b/drivers/leds/Makefile
@@ -22,6 +22,7 @@ obj-$(CONFIG_LEDS_SUNFIRE)		+= leds-sunf
 obj-$(CONFIG_LEDS_PCA9532)		+= leds-pca9532.o
 obj-$(CONFIG_LEDS_GPIO_REGISTER)	+= leds-gpio-register.o
 obj-$(CONFIG_LEDS_GPIO)			+= leds-gpio.o
+obj-$(CONFIG_LEDS_LATCH)		+= leds-latch.o
 obj-$(CONFIG_LEDS_LP3944)		+= leds-lp3944.o
 obj-$(CONFIG_LEDS_LP5521)		+= leds-lp5521.o
 obj-$(CONFIG_LEDS_LP5523)		+= leds-lp5523.o
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -210,4 +210,18 @@ struct gpio_led_platform_data {
 struct platform_device *gpio_led_register_device(
 		int id, const struct gpio_led_platform_data *pdata);
 
+/* For the leds-latch driver */
+struct latch_led {
+	const char *name;
+	char *default_trigger;
+	unsigned  bit;
+};
+
+struct latch_led_platform_data {
+	int     num_leds;
+	u32     mem;
+	struct latch_led *leds;
+	void	(*set_led)(u8 bit, enum led_brightness value);
+};
+
 #endif		/* __LINUX_LEDS_H_INCLUDED */
