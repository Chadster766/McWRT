#!/bin/sh

# McWRT fan control using some of RickStep's logic

# set this to 1 for some debugging output
VERBOSE=0

# get some initial readings
CPU_TEMP=`cut -c1-2 /sys/class/hwmon/hwmon0/device/temp1_input`        
RAM_TEMP=`cut -c1-2 /sys/class/hwmon/hwmon1/device/temp1_input`   
WIFI_TEMP=`cut -c1-2 /sys/class/hwmon/hwmon1/device/temp2_input`
LAST_CPU_TEMP=$CPU_TEMP
LAST_RAM_TEMP=$RAM_TEMP
LAST_WIFI_TEMP=$WIFI_TEMP

# SLEEP_DURATION and CPU_TEMP_CHECK need to be multiples of each other
EMERGENCY_COOLDOWN_DURATION=30
SLEEP_DURATION=5
CPU_TEMP_CHECK=20
DEFAULT_SPEED=medium

EMERGENCY_COOLDOWN=0
EMERGENCY_COOLDOWN_TIMER=0
ELAPSED_TIME=0
LAST_FAN_SPEED=$DEFAULT_SPEED

FAN_CTRL=/usr/sbin/fan

# use this to make setting the fan a bit easier
#     set_fan WHAT VALUE
set_fan() {
    if [ $LAST_FAN_SPEED != $2 ]; then
        if [ $VERBOSE == 1 ]; then
            echo "setting fan to ${2} (${1}) ${FAN_CTRL}"
        fi

        # write the new speed to the fan controller
        /bin/sh -c "$FAN_CTRL $2" 
        LAST_FAN_SPEED=$2
    fi
}

float_ge() {
    awk -v n1=$1 -v n2=$2 "BEGIN { if ( n1 >= n2 ) exit 1; exit 0; }"
    echo $?
}

# start the emergency cooldown mode
start_emergency_cooldown() {
    if [ $VERBOSE == 1 ]; then
        echo
        echo "Starting Emergency Cooldown!"
    fi

    # toggle the cooldown bit to on and reset the timer
    EMERGENCY_COOLDOWN=1
    EMERGENCY_COOLDOWN_TIMER=$EMERGENCY_COOLDOWN_DURATION
    
    set_fan EMERGENCY high
}              

# makes sure that the temperatures haven't fluctuated by more than 1.5 degrees
check_temp_change() {
    TEMP_CHANGE=$(($2 - $3));

    if [ $VERBOSE == 1 ]; then
        echo "${1} last temp: ${3} | new temp: ${2} | change: ${TEMP_CHANGE}"
    fi

    if [ $(float_ge $TEMP_CHANGE 3.0) == 1 ]; then
       start_emergency_cooldown;

       continue;
    fi
}

# set fan speeds based on CPU temperatures
check_cpu_temp() {
    if [ $VERBOSE == 1 ] ; then
        echo "Checking CPU Temp ${CPU_TEMP}"
    fi

    if [ $CPU_TEMP -ge 80 ]; then
        set_fan CPU high
    elif [ $CPU_TEMP -ge 75 ]; then
        set_fan CPU medium
    elif [ $CPU_TEMP -ge 70 ]; then
        set_fan CPU low
    else
        set_fan CPU off
    fi
}

# start the fan initially to $DEFAULT_SPEED
set_fan START $DEFAULT_SPEED

# the main program loop:
# - look at temperature deltas every $SLEEP_DURATION seconds
# - look at raw cpu temp every $CPU_TEMP_CHECK seconds
while true ; do

    # handle emergency cooldown stuff
    if [ $EMERGENCY_COOLDOWN == 1 ]; then

        # reduce the number of seconds left in emergency cooldown mode
        EMERGENCY_COOLDOWN_TIMER=$((${EMERGENCY_COOLDOWN_TIMER} - 5))

        # do we still need to be in cooldown?
        if [ $EMERGENCY_COOLDOWN_TIMER -le 0 ]; then

            set_fan LAST $LAST_FAN_SPEED                              

            EMERGENCY_COOLDOWN=0                                      

            if [ $VERBOSE == 1 ]; then
                echo "Exiting Emergency Cooldown Mode!"
                echo
            fi

        else
            if [ $VERBOSE == 1 ]; then
                echo "Still in Emergency Cooldown. ${EMERGENCY_COOLDOWN_TIMER} seconds left."
            fi

            sleep $SLEEP_DURATION

            continue
        fi
    fi

    # and re-read the current temperatures            
    CPU_TEMP=`cut -c1-2 /sys/class/hwmon/hwmon0/device/temp1_input`                     
    RAM_TEMP=`cut -c1-2 /sys/class/hwmon/hwmon1/device/temp1_input`           
    WIFI_TEMP=`cut -c1-2 /sys/class/hwmon/hwmon1/device/temp2_input`
    
    # check to see if the cpu, ram, or wifi temps have spiked
    check_temp_change CPU $CPU_TEMP $LAST_CPU_TEMP
    check_temp_change RAM $RAM_TEMP $LAST_RAM_TEMP
    check_temp_change WIFI $WIFI_TEMP $LAST_WIFI_TEMP

    # check the raw CPU temps every $CPU_TEMP_CHECK seconds...
    if [ $EMERGENCY_COOLDOWN != 1 ]; then
    	if [ $(( $ELAPSED_TIME % $CPU_TEMP_CHECK )) == 0 ]; then
        	check_cpu_temp
    	fi
    fi

    # wait $SLEEP_DURATION seconds and do this again
    if [ $VERBOSE == 1 ]; then
        echo "waiting ${SLEEP_DURATION} seconds..."
        echo
    fi

     # save the previous temperatures
     LAST_CPU_TEMP=$CPU_TEMP
     LAST_RAM_TEMP=$RAM_TEMP
     LAST_WIFI_TEMP=$WIFI_TEMP

    sleep $SLEEP_DURATION;

    ELAPSED_TIME=$(($ELAPSED_TIME + $SLEEP_DURATION))
done

