From fc4c8dd22030af51ea1882b856f336f32509a786 Mon Sep 17 00:00:00 2001
From: Eran Ben-Avi <benavi@marvell.com>
Date: Thu, 4 Apr 2013 12:16:48 +0300
Subject: [PATCH 591/609] cesa: remove calls to ocf crypto_freereq

When cesa_ocf_process fails, it should not release the ocf
request structure, this should be done by upper layer which
allocated it.

Change-Id: Ibbdef1420a411e6031cd03d9f75fe56848b44818
Signed-off-by: Eran Ben-Avi <benavi@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/1429
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
Tested-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Seif Mazareeb <seif@marvell.com>
---
 .../mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c          |   33 ++++++++------------
 1 file changed, 13 insertions(+), 20 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c
index 50b1039..8ccc5f8 100755
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c
@@ -324,30 +324,28 @@ cesa_ocf_process(device_t dev, struct cryptop *crp, int hint)
 			should be available in CESA fifo */
 		if (free_resrc < 2) {
                 	dprintk("%s,%d: ERESTART\n", __FILE__, __LINE__);
-#ifdef CONFIG_SMP
-			crypto_freereq(crp);
-#endif
-                	return ERESTART;
+			return -ERESTART;
 		}
 
 #ifdef RT_DEBUG
         /* Sanity check */
         if (crp == NULL) {
                 printk("%s,%d: EINVAL\n", __FILE__, __LINE__);
-                return EINVAL;
+		return -EINVAL;
         }
 
         if (crp->crp_desc == NULL || crp->crp_buf == NULL ) {
                 printk("%s,%d: EINVAL\n", __FILE__, __LINE__);
                 crp->crp_etype = EINVAL;
-                return EINVAL;
+		return -EINVAL;
         }
 
         sid = crp->crp_sid & 0xffffffff;
         if ((sid >= cesa_ocf_sesnum) || (cesa_ocf_sessions[sid] == NULL)) {
-                crp->crp_etype = ENOENT;
-                printk("%s,%d: ENOENT session %d \n", __FILE__, __LINE__, sid);
-                return EINVAL;
+		crp->crp_etype = -ENOENT;
+		printk(KERN_ERR "%s,%d: ENOENT session %d\n", __FILE__,
+				__LINE__, sid);
+		return -EINVAL;
         }
 #endif
 
@@ -682,12 +680,9 @@ cesa_ocf_process(device_t dev, struct cryptop *crp, int hint)
 			cesa_ocf_free(cesa_ocf_cmd);
 		if(cesa_ocf_cmd_wa)
 			cesa_ocf_free(cesa_ocf_cmd_wa);
-#ifdef CONFIG_SMP
-		crypto_freereq(crp);
-#endif
-		return ERESTART;
-	} 
-	else if((status != MV_NO_MORE) && (status != MV_OK)) {
+
+		return -ERESTART;
+	} else if ((status != MV_NO_MORE) && (status != MV_OK)) {
                 printk("%s,%d: cesa action failed, status = 0x%x\n", __FILE__, __LINE__, status);
 		goto p_error;
         }
@@ -695,15 +690,13 @@ cesa_ocf_process(device_t dev, struct cryptop *crp, int hint)
 	return 0;
 
 p_error:
-	crp->crp_etype = EINVAL;
+	crp->crp_etype = -EINVAL;
 	if(cesa_ocf_cmd)
 		cesa_ocf_free(cesa_ocf_cmd);
 	if(cesa_ocf_cmd_wa)
 		cesa_ocf_free(cesa_ocf_cmd_wa);
-#ifdef CONFIG_SMP
-	crypto_freereq(crp);
-#endif
-       	return EINVAL;
+
+	return -EINVAL;
 }
 
 /*
-- 
1.7.9.5

