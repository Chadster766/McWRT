From 185bc613312c36b3f80d4a3964c4208d1a8b7bf3 Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Sun, 7 Apr 2013 18:40:19 +0300
Subject: [PATCH 588/609] Fix: IRQ, PM: restore global IRQ affinity when
 returning from suspend to RAM

In case of SMP configuration, the axp_irq_unmask will just enable
the global IRQ and leave it masked.
Therefore, when retruning from suspend to RAM, We must manually unmask the global IRQs.

Bug Fix - Needs to be integrated to stable branch

Change-Id: I524ead4c33cf05f1a83e49c0e52c6d23761b57aa
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/1455
Reviewed-by: Shadi Ammouri <shadi@marvell.com>
Tested-by: Shadi Ammouri <shadi@marvell.com>
Signed-off-by: Seif Mazareeb <seif@marvell.com>
---
 arch/arm/mach-armadaxp/irq.c |   33 +++++++++++++++++++++++++++++++++
 arch/arm/mach-armadaxp/pm.c  |    2 ++
 2 files changed, 35 insertions(+)

diff --git a/arch/arm/mach-armadaxp/irq.c b/arch/arm/mach-armadaxp/irq.c
index 7b651ec..bdb1a68 100644
--- a/arch/arm/mach-armadaxp/irq.c
+++ b/arch/arm/mach-armadaxp/irq.c
@@ -198,6 +198,39 @@ static struct irq_chip axp_irq_chip = {
 #endif
 };
 
+#ifdef CONFIG_CPU_PM
+#ifdef CONFIG_SMP
+/*
+ * In case of SMP configuration, the axp_irq_unmask will just enable
+ * the global IRQ and leave it masked. Therefore, when retruning from
+ * suspend to RAM, We must manually unmask the global IRQs.
+ */
+void axp_irq_restore(void)
+{
+	int irq, cpu;
+	struct irq_data *d;
+	struct cpumask mask_temp;
+
+	/* Unmask global IRQs according to the IRQ structure affinity value */
+	for (irq = MAX_PER_CPU_IRQ_NUMBER; irq < IRQ_MAIN_INTS_NUM; irq++) {
+		d = irq_get_irq_data(irq);
+		cpumask_and(&mask_temp, d->affinity, cpu_online_mask);
+
+		for_each_possible_cpu(cpu) {
+			if (*cpus_addr(mask_temp) & (1 << cpu))
+				MV_REG_WRITE(CPU_INT_CLEAR_MASK_REG(get_hw_cpu_id(cpu)), d->irq);
+			else
+				MV_REG_WRITE(CPU_INT_SET_MASK_REG(get_hw_cpu_id(cpu)), d->irq);
+		}
+	}
+}
+#else
+void axp_irq_restore(void)
+{
+}
+#endif
+#endif
+
 void __init axp_init_irq(void)
 {
 	u32 irq;
diff --git a/arch/arm/mach-armadaxp/pm.c b/arch/arm/mach-armadaxp/pm.c
index ea7936a..0dced25 100644
--- a/arch/arm/mach-armadaxp/pm.c
+++ b/arch/arm/mach-armadaxp/pm.c
@@ -23,6 +23,7 @@
 extern void armadaxp_deepidle(int power_state);
 extern void armadaxp_suspend(void);
 extern void axp_db_restore(void);
+extern void axp_irq_restore(void);
 
 typedef enum  {
 	DISABLED,
@@ -124,6 +125,7 @@ static int armadaxp_pm_enter(suspend_state_t state)
 
 		pr_info("Restoring Armada XP\n");
 		axp_db_restore();
+		axp_irq_restore();
 
 		break;
 	default:
-- 
1.7.9.5

