From 2afd83ca2451c988c3cb9aa03d22fecf09b33b21 Mon Sep 17 00:00:00 2001
From: Shadi Ammouri <shadi@marvell.com>
Date: Wed, 22 Aug 2012 16:06:31 +0300
Subject: [PATCH 258/609] Add some statistics for the mm bounce subsystem

Signed-off-by: Shadi Ammouri <shadi@marvell.com>
Signed-off-by: Seif Mazareeb <seif@marvell.com>
---
 mm/bounce.c |   42 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 42 insertions(+)

diff --git a/mm/bounce.c b/mm/bounce.c
index 4e9ae72..6e613ab 100644
--- a/mm/bounce.c
+++ b/mm/bounce.c
@@ -15,6 +15,7 @@
 #include <linux/hash.h>
 #include <linux/highmem.h>
 #include <linux/bootmem.h>
+#include <linux/proc_fs.h>
 #include <asm/tlbflush.h>
 
 #include <trace/events/block.h>
@@ -22,7 +23,39 @@
 #define POOL_SIZE	64
 #define ISA_POOL_SIZE	16
 
+#undef BOUNCE_STATS
+
 static mempool_t *page_pool, *isa_page_pool;
+struct proc_dir_entry *bounce_stats_proc;
+
+#ifdef BOUNCE_STATS
+struct {
+	uint32_t calls;
+	uint32_t bounced;
+} bounce_stats;
+#define STATS(field) (bounce_stats.field++)
+#else
+#define STATS(field)
+#endif
+
+#ifdef BOUNCE_STATS
+int bounce_stats_read(char *page, char **start, off_t off,
+		int count, int *eof, void *data)
+{
+	int cnt = 0;
+	char tmp_buffer[1000] = { 0 };
+
+	if (off > 0)
+		return 0;
+
+	cnt += sprintf(tmp_buffer + cnt, "Calls: %d.\n", bounce_stats.calls);
+	cnt += sprintf(tmp_buffer + cnt, "Bounced: %d.\n", bounce_stats.bounced);
+
+	*(tmp_buffer + cnt) = '\0';
+	sprintf(page, "%s", tmp_buffer);
+	return cnt;
+}
+#endif
 
 #ifdef CONFIG_HIGHMEM
 static __init int init_emergency_pool(void)
@@ -36,6 +69,12 @@ static __init int init_emergency_pool(void)
 	BUG_ON(!page_pool);
 	printk("highmem bounce pool size: %d pages\n", POOL_SIZE);
 
+#ifdef BOUNCE_STATS
+	/* Create a proc entry for bounce statistics. */
+	bounce_stats_proc = create_proc_entry("bounce_stats", 0666, NULL);
+	bounce_stats_proc->read_proc = bounce_stats_read;
+	bounce_stats_proc->nlink = 1;
+#endif
 	return 0;
 }
 
@@ -228,6 +267,7 @@ static void __blk_queue_bounce(struct request_queue *q, struct bio **bio_orig,
 	if (!bio)
 		return;
 
+	STATS(bounced);
 	trace_block_bio_bounce(q, *bio_orig);
 
 	/*
@@ -276,6 +316,8 @@ void blk_queue_bounce(struct request_queue *q, struct bio **bio_orig)
 	if (!bio_has_data(*bio_orig))
 		return;
 
+	STATS(calls);
+
 	/*
 	 * for non-isa bounce case, just check if the bounce pfn is equal
 	 * to or bigger than the highest pfn in the system -- in that case,
-- 
1.7.9.5

