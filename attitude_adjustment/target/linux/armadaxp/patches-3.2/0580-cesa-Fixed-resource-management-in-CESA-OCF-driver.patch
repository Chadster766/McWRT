From 596d1850944ca8448e1e187be47458bd491993e6 Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Tue, 2 Apr 2013 15:53:53 +0300
Subject: [PATCH 580/609] cesa: Fixed resource management in CESA OCF driver.

The resource management in CESA OCF driver was inefficient in SMP
environment, causing CESA starvation and as result CESA performance
degradation. This commit introduce following changes to fix the problem:

- Use stack allocator for CESA descriptors instead of FIFO-based allocator.
- Free request descriptor before calling user-provided callback.
- Drop CESA lock while calling user-provided callback.

Change-Id: Idde12162c4cd34ac350050c3019b2fedd4ed7ff4
Signed-off-by: Piotr Ziecik <kosmo@semihalf.com>
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/1404
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Seif Mazareeb <seif@marvell.com>
---
 .../mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c          |   43 +++++++++++---------
 1 file changed, 23 insertions(+), 20 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c
index ec1df9d..50b1039 100755
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/cesa_ocf_drv.c
@@ -108,7 +108,6 @@ struct cesa_ocf_process {
 	int					digest_len;
 	struct cryptop 				*crp;
 	int 					need_cb;
-	int					valid;
 };
 
 /* global variables */
@@ -137,7 +136,9 @@ static struct tasklet_struct cesa_ocf_tasklet;
 static struct timeval          tt_start;
 static struct timeval          tt_end;
 static struct cesa_ocf_process *cesa_ocf_pool = NULL;
-static int proc_empty;
+static struct cesa_ocf_process *cesa_ocf_stack[CESA_OCF_POOL_SIZE];
+static unsigned int cesa_ocf_stack_idx;
+
 /*
  * dummy device structure
  */
@@ -266,23 +267,19 @@ ocf_check_action(struct cryptop *crp, struct cesa_ocf_data *cesa_ocf_cur_ses) {
 
 static inline struct cesa_ocf_process* cesa_ocf_alloc(void)
 {
-	int proc = 0;
+	struct cesa_ocf_process *retval;
 	unsigned long flags;
 	
 	spin_lock_irqsave(&cesa_lock, flags);
-
-	if(cesa_ocf_pool[proc_empty].valid != 0) {
+	if (cesa_ocf_stack_idx == 0) {
 		spin_unlock_irqrestore(&cesa_lock, flags);
-		printk("%s,%d: Error, entry is overrided in cesa_ocf_pool(%d)\n", __FILE__, __LINE__,proc_empty);
 		return NULL;
 	}
 
-	cesa_ocf_pool[proc_empty].valid = 1;
-	proc = proc_empty;
-	proc_empty = ((proc_empty+1) % CESA_OCF_POOL_SIZE);
+	retval = cesa_ocf_stack[--cesa_ocf_stack_idx];
 	spin_unlock_irqrestore(&cesa_lock, flags);
 
-	return &cesa_ocf_pool[proc];
+	return retval;
 }
 
 static inline void cesa_ocf_free(struct cesa_ocf_process *ocf_process_p)
@@ -290,7 +287,7 @@ static inline void cesa_ocf_free(struct cesa_ocf_process *ocf_process_p)
 	unsigned long flags;
 
 	spin_lock_irqsave(&cesa_lock, flags);
-	ocf_process_p->valid = 0;
+	cesa_ocf_stack[cesa_ocf_stack_idx++] = ocf_process_p;
 	spin_unlock_irqrestore(&cesa_lock, flags);
 }
 
@@ -717,6 +714,7 @@ cesa_callback(unsigned long dummy)
 {
 	struct cesa_ocf_process *cesa_ocf_cmd = NULL;
 	struct cryptop 		*crp = NULL;
+	int need_cb;
 
 	dprintk("%s()\n", __func__);
 
@@ -724,19 +722,22 @@ cesa_callback(unsigned long dummy)
 
 	while (atomic_read(&result_count) != 0) {
 		cesa_ocf_cmd = result_Q[result_done];
+		need_cb = cesa_ocf_cmd->need_cb;
 		crp = cesa_ocf_cmd->crp; 
 
-		if (cesa_ocf_cmd->need_cb) {
-			if (debug) {
-				mvCesaIfDebugMbuf("DST BUFFER", cesa_ocf_cmd->cesa_cmd.pDst, 0,
+		if (debug && need_cb)
+			mvCesaIfDebugMbuf("DST BUFFER", cesa_ocf_cmd->cesa_cmd.pDst, 0,
 							cesa_ocf_cmd->cesa_cmd.pDst->mbufSize);
-			}
-			crypto_done(crp);
-		}
-	
+
 		result_done = ((result_done + 1) % CESA_RESULT_Q_SIZE);
 		atomic_dec(&result_count);
-		cesa_ocf_cmd->valid = 0;
+		cesa_ocf_stack[cesa_ocf_stack_idx++] = cesa_ocf_cmd;
+
+		if (need_cb) {
+			spin_unlock(&cesa_lock);
+			crypto_done(crp);
+			spin_lock(&cesa_lock);
+		}
 	}
 
 	spin_unlock(&cesa_lock);
@@ -1163,7 +1164,9 @@ cesa_ocf_init(void)
             	return EINVAL;
       	}
 
-	proc_empty = 0;
+	for (cesa_ocf_stack_idx = 0; cesa_ocf_stack_idx < CESA_OCF_POOL_SIZE; cesa_ocf_stack_idx++)
+		cesa_ocf_stack[cesa_ocf_stack_idx] = &cesa_ocf_pool[cesa_ocf_stack_idx];
+
 	memset(cesa_ocf_pool, 0, (sizeof(struct cesa_ocf_process) * CESA_OCF_POOL_SIZE));
 	memset(&mv_cesa_dev, 0, sizeof(mv_cesa_dev));
 	softc_device_init(&mv_cesa_dev, "MV CESA", 0, mv_cesa_methods);
-- 
1.7.9.5

