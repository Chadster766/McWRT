From fb3651ee91a1c7869f160963fca9825d2b71eefa Mon Sep 17 00:00:00 2001
From: Seif Mazareeb <seif@marvell.com>
Date: Wed, 22 Feb 2012 15:41:31 +0200
Subject: [PATCH 020/609] DSMP fix USB test driver (originaly by Dima E.)

Signed-off-by: Seif Mazareeb <seif@marvell.com>
---
 drivers/usb/misc/usbtest.c |  158 ++++++++++++++++++++++++++++----------------
 1 file changed, 100 insertions(+), 58 deletions(-)

diff --git a/drivers/usb/misc/usbtest.c b/drivers/usb/misc/usbtest.c
index b9ac9a3..d3e51ba 100644
--- a/drivers/usb/misc/usbtest.c
+++ b/drivers/usb/misc/usbtest.c
@@ -61,6 +61,7 @@ struct usbtest_dev {
 	struct usbtest_info	*info;
 	int			in_pipe;
 	int			out_pipe;
+	struct usb_endpoint_descriptor	*in_desc, *out_desc;
 	int			in_iso_pipe;
 	int			out_iso_pipe;
 	struct usb_endpoint_descriptor	*iso_in, *iso_out;
@@ -76,7 +77,7 @@ static struct usb_device *testdev_to_usbdev(struct usbtest_dev *test)
 }
 
 /* set up all urbs so they can be used with either bulk or interrupt */
-#define	INTERRUPT_RATE		1	/* msec/transfer */
+#define UNLINK_RATE     1   /* msec */
 
 #define ERROR(tdev, fmt, args...) \
 	dev_err(&(tdev)->intf->dev , fmt , ## args)
@@ -112,6 +113,7 @@ get_endpoints(struct usbtest_dev *dev, struct usb_interface *intf)
 			e = alt->endpoint + ep;
 			switch (e->desc.bmAttributes) {
 			case USB_ENDPOINT_XFER_BULK:
+			case USB_ENDPOINT_XFER_INT:
 				break;
 			case USB_ENDPOINT_XFER_ISOC:
 				if (dev->info->iso)
@@ -153,10 +155,21 @@ found:
 	}
 
 	if (in) {
-		dev->in_pipe = usb_rcvbulkpipe(udev,
-			in->desc.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);
-		dev->out_pipe = usb_sndbulkpipe(udev,
-			out->desc.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);
+        if(in->desc.bmAttributes == USB_ENDPOINT_XFER_INT) {
+			dev->in_pipe = usb_rcvintpipe (udev,
+				in->desc.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);
+			if (out)
+				dev->out_pipe = usb_sndintpipe (udev,
+					out->desc.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);
+		} else {
+			dev->in_pipe = usb_rcvbulkpipe (udev,
+				in->desc.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);
+			if (out)
+				dev->out_pipe = usb_sndbulkpipe (udev,
+					out->desc.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);
+        }
+        dev->in_desc = &in->desc;
+        dev->out_desc = &out->desc;
 	}
 	if (iso_in) {
 		dev->iso_in = &iso_in->desc;
@@ -191,19 +204,28 @@ static void simple_callback(struct urb *urb)
 static struct urb *usbtest_alloc_urb(
 	struct usb_device	*udev,
 	int			pipe,
+	struct usb_endpoint_descriptor *desc,
 	unsigned long		bytes,
 	unsigned		transfer_flags,
 	unsigned		offset)
 {
 	struct urb		*urb;
 
+	if (bytes < 0)
+		return NULL;
 	urb = usb_alloc_urb(0, GFP_KERNEL);
 	if (!urb)
 		return urb;
+
 	usb_fill_bulk_urb(urb, udev, pipe, NULL, bytes, simple_callback, NULL);
-	urb->interval = (udev->speed == USB_SPEED_HIGH)
-			? (INTERRUPT_RATE << 3)
-			: INTERRUPT_RATE;
+
+	if(desc != NULL) {
+		if( (udev->speed == USB_SPEED_HIGH) ||
+			((desc->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_ISOC))
+			urb->interval = (1 << (desc->bInterval - 1));
+		else
+			urb->interval = desc->bInterval;
+    }
 	urb->transfer_flags = transfer_flags;
 	if (usb_pipein(pipe))
 		urb->transfer_flags |= URB_SHORT_NOT_OK;
@@ -239,9 +261,10 @@ static struct urb *usbtest_alloc_urb(
 static struct urb *simple_alloc_urb(
 	struct usb_device	*udev,
 	int			pipe,
+	struct usb_endpoint_descriptor *desc,
 	unsigned long		bytes)
 {
-	return usbtest_alloc_urb(udev, pipe, bytes, URB_NO_TRANSFER_DMA_MAP, 0);
+	return usbtest_alloc_urb(udev, pipe, desc, bytes, URB_NO_TRANSFER_DMA_MAP, 0);
 }
 
 static unsigned pattern;
@@ -331,15 +354,19 @@ static void simple_free_urb(struct urb *urb)
 {
 	unsigned long offset = buffer_offset(urb->transfer_buffer);
 
-	if (urb->transfer_flags & URB_NO_TRANSFER_DMA_MAP)
-		usb_free_coherent(
-			urb->dev,
-			urb->transfer_buffer_length + offset,
-			urb->transfer_buffer - offset,
-			urb->transfer_dma - offset);
-	else
-		kfree(urb->transfer_buffer - offset);
-	usb_free_urb(urb);
+	if (urb != NULL) {
+		if ((urb->transfer_buffer != NULL) && (urb->transfer_buffer_length > 0)) {
+			if (urb->transfer_flags & URB_NO_TRANSFER_DMA_MAP)
+				usb_free_coherent(
+					urb->dev,
+					urb->transfer_buffer_length + offset,
+					urb->transfer_buffer - offset,
+					urb->transfer_dma - offset);
+			else
+				kfree(urb->transfer_buffer - offset);
+		}
+		usb_free_urb(urb);
+	}
 }
 
 static int simple_io(
@@ -426,6 +453,8 @@ alloc_sglist(int nents, int max, int vary)
 	sg = kmalloc(nents * sizeof *sg, GFP_KERNEL);
 	if (!sg)
 		return NULL;
+
+	memset(sg, 0, nents * sizeof *sg);
 	sg_init_table(sg, nents);
 
 	for (i = 0; i < nents; i++) {
@@ -466,6 +495,7 @@ static int perform_sglist(
 	struct usbtest_dev	*tdev,
 	unsigned		iterations,
 	int			pipe,
+	struct usb_endpoint_descriptor *desc,
 	struct usb_sg_request	*req,
 	struct scatterlist	*sg,
 	int			nents
@@ -473,17 +503,23 @@ static int perform_sglist(
 {
 	struct usb_device	*udev = testdev_to_usbdev(tdev);
 	int			retval = 0;
+	int         interval = 0;
 
 	while (retval == 0 && iterations-- > 0) {
-		retval = usb_sg_init(req, udev, pipe,
-				(udev->speed == USB_SPEED_HIGH)
-					? (INTERRUPT_RATE << 3)
-					: INTERRUPT_RATE,
-				sg, nents, 0, GFP_KERNEL);
+		if(desc != NULL) {
+			if( (udev->speed == USB_SPEED_HIGH) ||
+				((desc->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_ISOC))
+				interval = (1 << (desc->bInterval - 1));
+			else
+				interval = desc->bInterval;
+		}
 
+		retval = usb_sg_init (req, udev, pipe, interval,
+				                sg, nents, 0, GFP_KERNEL);
 		if (retval)
 			break;
-		usb_sg_wait(req);
+
+		usb_sg_wait (req);
 		retval = req->status;
 
 		/* FIXME check resulting data pattern */
@@ -1053,7 +1089,7 @@ test_ctrl_queue(struct usbtest_dev *dev, struct usbtest_param *param)
 			goto cleanup;
 		}
 		req.wLength = cpu_to_le16(len);
-		urb[i] = u = simple_alloc_urb(udev, pipe, len);
+		urb [i] = u = simple_alloc_urb (udev, pipe, NULL, len);
 		if (!u)
 			goto cleanup;
 
@@ -1119,14 +1155,15 @@ static void unlink1_callback(struct urb *urb)
 	}
 }
 
-static int unlink1(struct usbtest_dev *dev, int pipe, int size, int async)
+static int unlink1 (struct usbtest_dev *dev, int pipe,
+                    struct usb_endpoint_descriptor *desc, int size, int async)
 {
 	struct urb		*urb;
 	struct completion	completion;
 	int			retval = 0;
 
 	init_completion(&completion);
-	urb = simple_alloc_urb(testdev_to_usbdev(dev), pipe, size);
+	urb = simple_alloc_urb (testdev_to_usbdev (dev), pipe, desc, size);
 	if (!urb)
 		return -ENOMEM;
 	urb->context = &completion;
@@ -1147,7 +1184,7 @@ static int unlink1(struct usbtest_dev *dev, int pipe, int size, int async)
 	/* unlinking that should always work.  variable delay tests more
 	 * hcd states and code paths, even with little other system load.
 	 */
-	msleep(jiffies % (2 * INTERRUPT_RATE));
+	msleep (jiffies % (2 * UNLINK_RATE));
 	if (async) {
 		while (!completion_done(&completion)) {
 			retval = usb_unlink_urb(urb);
@@ -1189,14 +1226,15 @@ static int unlink1(struct usbtest_dev *dev, int pipe, int size, int async)
 				0 : retval - 2000;
 }
 
-static int unlink_simple(struct usbtest_dev *dev, int pipe, int len)
+static int unlink_simple (struct usbtest_dev *dev, int pipe,
+						struct usb_endpoint_descriptor *desc, int len)
 {
 	int			retval = 0;
 
 	/* test sync and async paths */
-	retval = unlink1(dev, pipe, len, 1);
+	retval = unlink1 (dev, pipe, desc, len, 1);
 	if (!retval)
-		retval = unlink1(dev, pipe, len, 0);
+		retval = unlink1 (dev, pipe, desc, len, 0);
 	return retval;
 }
 
@@ -1393,9 +1431,9 @@ static int halt_simple(struct usbtest_dev *dev)
 	struct usb_device	*udev = testdev_to_usbdev(dev);
 
 	if (udev->speed == USB_SPEED_SUPER)
-		urb = simple_alloc_urb(udev, 0, 1024);
+		urb = simple_alloc_urb(udev, 0, NULL, 1024);
 	else
-		urb = simple_alloc_urb(udev, 0, 512);
+		urb = simple_alloc_urb(udev, 0, NULL, 512);
 	if (urb == NULL)
 		return -ENOMEM;
 
@@ -1646,9 +1684,9 @@ test_iso_queue(struct usbtest_dev *dev, struct usbtest_param *param,
 	unsigned		i;
 	unsigned long		packets = 0;
 	int			status = 0;
-	struct urb		*urbs[10];	/* FIXME no limit */
+	struct urb			*urbs[50];  /* FIXME no limit */
 
-	if (param->sglen > 10)
+	if (param->sglen > 50)
 		return -EDOM;
 
 	memset(&context, 0, sizeof context);
@@ -1692,9 +1730,6 @@ test_iso_queue(struct usbtest_dev *dev, struct usbtest_param *param,
 				spin_unlock_irq(&context.lock);
 				goto fail;
 			}
-
-			simple_free_urb(urbs[i]);
-			urbs[i] = NULL;
 			context.pending--;
 			context.submit_error = 1;
 			break;
@@ -1704,10 +1739,6 @@ test_iso_queue(struct usbtest_dev *dev, struct usbtest_param *param,
 
 	wait_for_completion(&context.done);
 
-	for (i = 0; i < param->sglen; i++) {
-		if (urbs[i])
-			simple_free_urb(urbs[i]);
-	}
 	/*
 	 * Isochronous transfers are expected to fail sometimes.  As an
 	 * arbitrary limit, we will report an error if any submissions
@@ -1719,7 +1750,6 @@ test_iso_queue(struct usbtest_dev *dev, struct usbtest_param *param,
 		status = -EACCES;
 	else if (context.errors > context.packet_count / 10)
 		status = -EIO;
-	return status;
 
 fail:
 	for (i = 0; i < param->sglen; i++) {
@@ -1739,7 +1769,7 @@ static int test_unaligned_bulk(
 {
 	int retval;
 	struct urb *urb = usbtest_alloc_urb(
-		testdev_to_usbdev(tdev), pipe, length, transfer_flags, 1);
+		testdev_to_usbdev(tdev), pipe, NULL, length, transfer_flags, 1);
 
 	if (!urb)
 		return -ENOMEM;
@@ -1846,7 +1876,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		dev_info(&intf->dev,
 				"TEST 1:  write %d bytes %u times\n",
 				param->length, param->iterations);
-		urb = simple_alloc_urb(udev, dev->out_pipe, param->length);
+		urb = simple_alloc_urb (udev, dev->out_pipe, dev->out_desc, param->length);
 		if (!urb) {
 			retval = -ENOMEM;
 			break;
@@ -1861,7 +1891,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		dev_info(&intf->dev,
 				"TEST 2:  read %d bytes %u times\n",
 				param->length, param->iterations);
-		urb = simple_alloc_urb(udev, dev->in_pipe, param->length);
+		urb = simple_alloc_urb (udev, dev->in_pipe, dev->in_desc, param->length);
 		if (!urb) {
 			retval = -ENOMEM;
 			break;
@@ -1876,7 +1906,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		dev_info(&intf->dev,
 				"TEST 3:  write/%d 0..%d bytes %u times\n",
 				param->vary, param->length, param->iterations);
-		urb = simple_alloc_urb(udev, dev->out_pipe, param->length);
+		urb = simple_alloc_urb (udev, dev->out_pipe, dev->out_desc, param->length);
 		if (!urb) {
 			retval = -ENOMEM;
 			break;
@@ -1892,7 +1922,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		dev_info(&intf->dev,
 				"TEST 4:  read/%d 0..%d bytes %u times\n",
 				param->vary, param->length, param->iterations);
-		urb = simple_alloc_urb(udev, dev->in_pipe, param->length);
+		urb = simple_alloc_urb (udev, dev->in_pipe, dev->in_desc, param->length);
 		if (!urb) {
 			retval = -ENOMEM;
 			break;
@@ -1918,7 +1948,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		}
 		/* FIRMWARE:  bulk sink (maybe accepts short writes) */
 		retval = perform_sglist(dev, param->iterations, dev->out_pipe,
-				&req, sg, param->sglen);
+				dev->out_desc, &req, sg, param->sglen);
 		free_sglist(sg, param->sglen);
 		break;
 
@@ -1936,7 +1966,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		}
 		/* FIRMWARE:  bulk source (maybe generates short writes) */
 		retval = perform_sglist(dev, param->iterations, dev->in_pipe,
-				&req, sg, param->sglen);
+				dev->in_desc, &req, sg, param->sglen);
 		free_sglist(sg, param->sglen);
 		break;
 	case 7:
@@ -1953,7 +1983,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		}
 		/* FIRMWARE:  bulk sink (maybe accepts short writes) */
 		retval = perform_sglist(dev, param->iterations, dev->out_pipe,
-				&req, sg, param->sglen);
+				dev->out_desc, &req, sg, param->sglen);
 		free_sglist(sg, param->sglen);
 		break;
 	case 8:
@@ -1970,7 +2000,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		}
 		/* FIRMWARE:  bulk source (maybe generates short writes) */
 		retval = perform_sglist(dev, param->iterations, dev->in_pipe,
-				&req, sg, param->sglen);
+				dev->in_desc, &req, sg, param->sglen);
 		free_sglist(sg, param->sglen);
 		break;
 
@@ -2007,7 +2037,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		dev_info(&intf->dev, "TEST 11:  unlink %d reads of %d\n",
 				param->iterations, param->length);
 		for (i = param->iterations; retval == 0 && i--; /* NOP */)
-			retval = unlink_simple(dev, dev->in_pipe,
+			retval = unlink_simple (dev, dev->in_pipe, dev->in_desc,
 						param->length);
 		if (retval)
 			dev_err(&intf->dev, "unlink reads failed %d, "
@@ -2020,7 +2050,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 		dev_info(&intf->dev, "TEST 12:  unlink %d writes of %d\n",
 				param->iterations, param->length);
 		for (i = param->iterations; retval == 0 && i--; /* NOP */)
-			retval = unlink_simple(dev, dev->out_pipe,
+			retval = unlink_simple (dev, dev->out_pipe, dev->out_desc,
 						param->length);
 		if (retval)
 			dev_err(&intf->dev, "unlink writes failed %d, "
@@ -2295,10 +2325,22 @@ usbtest_probe(struct usb_interface *intf, const struct usb_device_id *id)
 				dev->out_pipe = usb_sndbulkpipe(udev,
 							info->ep_out);
 		}
-		if (dev->in_pipe)
-			rtest = " bulk-in";
-		if (dev->out_pipe)
-			wtest = " bulk-out";
+        if (dev->in_pipe) {
+            if(usb_pipeint(dev->in_pipe)) {
+                rtest = " intr-in";
+            }
+            else {
+                rtest = " bulk-in";
+            }
+        }
+        if (dev->out_pipe){
+            if(usb_pipeint(dev->out_pipe)) {
+                wtest = " intr-out";
+            }
+            else {
+                wtest = " bulk-out";
+            }
+        }
 		if (dev->in_iso_pipe)
 			irtest = " iso-in";
 		if (dev->out_iso_pipe)
-- 
1.7.9.5

