#!/bin/sh /etc/rc.common
# Copyright (C) 2006 OpenWrt.org

START=05

start() {
	[ -e /etc/config/network ] && {
		local batch

		config_cb() {
			case "$1" in
			switch)
				option_cb() {
					case "$1" in
					vlan[0-9]|vlan1[0-5])
						local id="${1#vlan}"
						local ports="${2%\*}"
						append batch "delete network.eth0.${1}${N}"
						append batch "set network.eth0_${id}=switch_vlan${N}"
						append batch "set network.eth0_${id}.device=eth0${N}"
						append batch "set network.eth0_${id}.vlan=${id}${N}"
						append batch "set network.eth0_${id}.ports='${ports}'${N}"
					;;
					esac
				}
			;;
			switch_vlan)
				option_cb() { :; }
				batch=""
			;;
			esac
		}

		config_load network

		[ -n "$batch" ] && {
			logger -t netconfig "migrating switch config to new format ..."
			echo "$batch${N}commit network" | uci batch
		}

		exit 0
	}

	mkdir -p /etc/config

	(
		if grep -E 'mtd0: 000(6|a)0000' /proc/mtd 2>&- >&-; then
			# WGT634u
			echo boardtype=wgt634u
		else
			strings "$(find_mtd_part nvram)"
		fi
	) | awk '
	function p(cfgname, name) {
		if (c[name] != "") print "	option " cfgname "	\"" c[name] "\""
	}

	function vlan(id, name) {
		if (c[name] != "") {
			print "config switch_vlan eth0_" id
			print "	option device   \"eth0\""
			print "	option vlan     " id
			print "	option ports    \"" c[name] "\""
			print ""
		}
	}

	function macinc(mac, maca, i, result) {
		split(mac, maca, ":")
		for (i = 1; i <= 6; i++) maca[i] = "0x" maca[i]
		if (++maca[6] > 0xff) {
			maca[5]++
			maca[6] = 0
		}
		for (i = 1; i <= 6; i++) {
			if (i != 1) result = result ":"
			result = result sprintf("%02x", maca[i])
		}
		return result
	}

	BEGIN {
		FS="="
		c["lan_ifname"]="eth0.0"
		c["wan_ifname"]="eth0.1"
		c["vlan0ports"]="1 2 3 4 5"
		c["vlan1ports"]="0 5"
		getline < "/proc/diag/model"
		model=$0
		for (i = 0; i < 6; i++) {
			if (mac_check != "") mac_check = mac_check ":"
			mac_check = mac_check "[0-9a-fA-F][0-9a-fA-F]"
		}
	}

	($1 == "boardnum") || ($1 == "boardtype") || ($1 == "boardflags") || ($1 ~ /macaddr/) {
		nvram[$1] = $2
	}

	END {
		if ((model == "ASUS WL-HDD") || (model == "ASUS WL-300g") || (model == "Linksys WAP54G V1")) {
			c["wan_ifname"] = ""
			c["lan_ifname"] = "eth1"
		}
		if (model == "ASUS WL-330gE") {
			c["wan_ifname"] = ""
			c["lan_ifname"] = "eth0.0"
			c["vlan0ports"] = "4 5"
			c["vlan1ports"] = ""
		}
		if ((model == "ASUS WL-500g") || (model == "Microsoft MN-700")) {
			c["wan_ifname"] = "eth1"
			c["lan_ifname"] = "eth0"
		}
		if ((model == "ASUS WL-500g Premium V2") || (model == "Dell TrueMobile 2300 v2") || (model == "Buffalo WHR-G125")) {
			c["vlan0ports"] = "0 1 2 3 5"
			c["vlan1ports"] = "4 5"
		}
		if (model == "Dell TrueMobile 2300") {
			c["lan_ifname"] = "eth0"
			c["wan_ifname"] = "eth1"
			c["vlan0ports"] = "0 1 2 3 4 5u"
			c["vlan1ports"] = ""
		}
		if (nvram["boardtype"] == "bcm94710r4") {
			# Toshiba WRC-1000
			c["lan_ifname"] = "eth0"
			c["wan_ifname"] = "eth1"
		}
		if ((nvram["boardtype"] == "wgt634u") || (nvram["boardtype"] == "0x0467")) {
			c["vlan0ports"] = "0 1 2 3 5"
			c["vlan1ports"] = "4 5"
		}
		if ((nvram["boardtype"] == "0x042f") || (nvram["boardtype"] == "0x0472")) {
			if (nvram["boardnum"] == "45") {
				# WL-500gP
				c["vlan0ports"] = "1 2 3 4 5"
				c["vlan1ports"] = "0 5"
			} else {
				# Generic BCM94704
				c["vlan0ports"] = "0 1 2 3 4 5u"
				c["vlan1ports"] = ""
				c["lan_ifname"] = "eth0"
				c["wan_ifname"] = "eth1"

				# MAC addresses on 4704 tend to be screwed up. Add a workaround here
				if (nvram["et0macaddr"] ~ mac_check) {
					c["lan_macaddr"] = nvram["et0macaddr"]
					c["wan_macaddr"] = macinc(c["lan_macaddr"])
				}
			}
		}
		# Buffalo WBR-B11 and Buffalo WBR-G54
		if (nvram["boardtype"] == "bcm94710ap") {
			c["vlan0ports"] = "0 1 2 3 4 5u"
			c["vlan1ports"] = ""
			c["lan_ifname"] = "eth0"
			c["wan_ifname"] = "eth1"
		}
		# generic broadcom 4705/4785 processor with 5397 switch?
		#  EXCEPT Linksys WRT300N V1.1
		if ((nvram["boardtype"] == "0x478") && \
		    (model != "Linksys WRT300N V1.1")) {
			c["vlan0ports"] = "1 2 3 4 8*"
			c["vlan1ports"] = "0 8"
		}

		# WAP54G
		if ((nvram["boardnum"] == "2") || \
			(nvram["boardnum"] == "1024")) {
			c["lan_ifname"]="eth0"
			c["wan_ifname"]=""
		}

		# Sitecom WL-105b
		if ((nvram["boardum"] == "2") && \
			(nvram["GemtekPmonVer"] == "1")) {
			c["lan_ifname"]="eth0"
			c["wan_ifname"]=""
		}

		# ASUS WL-700gE
		# These are actually same as defaults above. For some reason this script applies
		# Generic BCM94704 settings instead so we revert to proper settings here.
		# Hopefully someone will fix this properly soon.
		if (model == "ASUS WL-700gE") {
			c["lan_ifname"]="eth0.0"
			c["wan_ifname"]="eth0.1"
			c["vlan0ports"]="1 2 3 4 5"
			c["vlan1ports"]="0 5"
		}
		if ((model == "Motorola WR850G V2/V3") || (model == "Siemens SE505 V2")) {
			c["vlan0ports"]="0 1 2 3 5"
			c["vlan1ports"]="4 5"
		}
		if (model == "ASUS WL-500W") {
			c["lan_ifname"] = "eth0"
			c["wan_ifname"] = "eth1"
			c["vlan0ports"] = "0 1 2 3 4 5u"
			c["vlan1ports"] = ""
		}
		if (model == "OvisLink WL-1600GL") {
			c["lan_ifname"] = "eth0.0"
			c["wan_ifname"] = "eth0.1"
			c["vlan0ports"] = "0 1 2 3 5"
			c["vlan1ports"] = "4 5"
		}

		if (c["vlan0ports"] || c["vlan1ports"]) {
			print "#### VLAN configuration "
			print "config switch eth0"
			print "	option enable   1"
			print ""
			vlan(0, "vlan0ports")
			vlan(1, "vlan1ports")
		}
		print "#### Loopback configuration"
		print "config interface loopback"
		print "	option ifname	\"lo\""
		print "	option proto	static"
		print "	option ipaddr	127.0.0.1"
		print "	option netmask	255.0.0.0"
		print ""
		print ""
		print "#### LAN configuration"
		print "config interface lan"
		print "	option type 	bridge"
		p("ifname", "lan_ifname")
		p("macaddr", "lan_macaddr")
		print "	option proto	static"
		print "	option ipaddr	192.168.1.1"
		print "	option netmask	255.255.255.0"
		print ""
		print ""
		if (c["wan_ifname"]) {
			print "#### WAN configuration"
			print "config interface	wan"
			p("ifname", "wan_ifname")
			p("macaddr", "wan_macaddr")
			print "	option proto	dhcp"
		} else {
			print "#### WAN configuration (disabled)"
			print "#config interface wan"
			print "#	option proto	dhcp"
		}
	}' > /etc/config/network
}
