From 339fe73f340161a624cc08e738d2244814852c3e Mon Sep 17 00:00:00 2001
From: John Crispin <blogic@openwrt.org>
Date: Sun, 17 Mar 2013 00:55:04 +0100
Subject: [PATCH] rt2x00: load eeprom on SoC from a mtd device defines inside
 OF

Signed-off-by: John Crispin <blogic@openwrt.org>
---
 drivers/net/wireless/rt2x00/Kconfig     |    1 +
 drivers/net/wireless/rt2x00/rt2800pci.c |   44 ++++++++++++++++++++++++++-----
 2 files changed, 39 insertions(+), 6 deletions(-)

--- a/drivers/net/wireless/rt2x00/Kconfig
+++ b/drivers/net/wireless/rt2x00/Kconfig
@@ -71,6 +71,7 @@ config RT2800PCI
 	select RT2X00_LIB_FIRMWARE
 	select RT2X00_LIB_EEPROM
 	select RT2X00_LIB_CRYPTO
+	select MTD if SOC_RT288X || SOC_RT305X
 	depends on CRC_CCITT
 	depends on EEPROM_93CX6
 	---help---
--- a/drivers/net/wireless/rt2x00/rt2x00eeprom.c
+++ b/drivers/net/wireless/rt2x00/rt2x00eeprom.c
@@ -30,12 +30,77 @@
 #include "rt2x00.h"
 #include "rt2x00lib.h"
 
+#ifdef CONFIG_OF
+#include <linux/of.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+
+static struct firmware mtd_fw;
+
+static int rt2800pci_read_eeprom_mtd(struct rt2x00_dev *rt2x00dev)
+{
+	struct device_node *np = rt2x00dev->dev->of_node, *mtd_np = NULL;
+	size_t retlen, len = rt2x00dev->ops->eeprom_size;
+	int ret, size, offset = 0;
+	struct mtd_info *mtd;
+	const char *part;
+	const __be32 *list;
+	phandle phandle;
+
+	list = of_get_property(np, "ralink,mtd-eeprom", &size);
+	if (!list) {
+		dev_err(rt2x00dev->dev, "failed to load eeprom property\n");
+		return -ENOENT;
+	}
+
+	phandle = be32_to_cpup(list++);
+	if (phandle)
+		mtd_np = of_find_node_by_phandle(phandle);
+	if (!mtd_np) {
+		dev_err(rt2x00dev->dev, "failed to load mtd phandle\n");
+		return -EINVAL;
+	}
+
+	part = of_get_property(mtd_np, "label", NULL);
+	if (!part)
+		part = mtd_np->name;
+
+	mtd = get_mtd_device_nm(part);
+	if (IS_ERR(mtd)) {
+		dev_err(rt2x00dev->dev, "failed to get mtd device \"%s\"\n", part);
+		return PTR_ERR(mtd);
+	}
+
+	if (size > sizeof(*list))
+		offset = be32_to_cpup(list);
+
+	ret = mtd_read(mtd, offset, len, &retlen, (u_char *) rt2x00dev->eeprom);
+	put_mtd_device(mtd);
+
+	if (!ret) {
+		rt2x00dev->eeprom_file = &mtd_fw;
+		mtd_fw.size = len;
+		mtd_fw.data = rt2x00dev->eeprom;
+	}
+
+	return ret;
+}
+#else
+static inline int rt2800pci_read_eeprom_mtd(struct rt2x00_dev *rt2x00dev)
+{
+	return -EINVAL;
+}
+#endif
+
 static int rt2x00lib_request_eeprom_file(struct rt2x00_dev *rt2x00dev)
 {
 	const struct firmware *ee;
 	char *ee_name;
 	int retval;
 
+	if (!rt2800pci_read_eeprom_mtd(rt2x00dev))
+		return 0;
+
 	ee_name = rt2x00dev->ops->lib->get_eeprom_file_name(rt2x00dev);
 	if (!ee_name) {
 		rt2x00_err(rt2x00dev,
