--- a/ath/if_ath.c
+++ b/ath/if_ath.c
@@ -8103,6 +8103,7 @@ ath_tx_start(struct net_device *dev, str
 		ath_hal_setupxtxdesc(sc->sc_ah, ds, mrr.rate1, mrr.retries1,
 				     mrr.rate2, mrr.retries2,
 				     mrr.rate3, mrr.retries3);
+		bf->rcflags = mrr.privflags;
 	}
 
 #ifndef ATH_SUPERG_FF
--- a/ath/if_athvar.h
+++ b/ath/if_athvar.h
@@ -446,6 +446,7 @@ struct ath_buf {
 	u_int16_t bf_flags;				/* tx descriptor flags */
 	u_int64_t bf_tsf;
 	int16_t bf_channoise;
+	unsigned int rcflags;
 #ifdef ATH_SUPERG_FF
 	/* XXX: combine this with bf_skbaddr if it ever changes to accommodate
 	 *      multiple segments.
--- a/ath_rate/minstrel/minstrel.c
+++ b/ath_rate/minstrel/minstrel.c
@@ -333,15 +333,19 @@ ath_rate_findrate(struct ath_softc *sc,
 		if (sn->static_rate_ndx >= 0) {
 			    ndx = sn->static_rate_ndx;
 		} else {
+			int delta;
 			sn->packet_count++;
 			sn->random_n = (sn->a * sn->random_n) + sn->b;
 			offset = sn->random_n & 0xf;
-			if ((((100 * sn->sample_count) / (sn->sample_count + sn->packet_count)) < ath_lookaround_rate) && (offset < 2)) {
+			delta = (sn->packet_count * ath_lookaround_rate / 100) - sn->sample_count;
+			if ((delta > 0) && (offset < 2)) {
 				sn->sample_count++;
 				sn->is_sampling = 1;
 				if (sn->packet_count >= 10000) {
 					sn->sample_count = 0;
 					sn->packet_count = 0;
+				} else if (delta > sn->num_rates * 2) {
+					sn->sample_count += ((delta - sn->num_rates * 2) * ath_lookaround_rate) / 100;
 				}
 
 				/* Don't look for slowest rate (i.e. slowest
@@ -398,11 +402,14 @@ ath_rate_get_mrr(struct ath_softc *sc, s
 		if (sn->num_rates <= 0)
 			return;
 
+		mrr->privflags = sn->is_sampling;
 		if (sn->is_sampling) {
 			sn->is_sampling = 0;
-			if (sn->rs_sample_rate_slower)
+			if (sn->rs_sample_rate_slower) {
 				rc1 = sn->rs_sample_rate;
-			else
+				if (sn->sample_count > 0)
+					sn->sample_count--;
+			} else
 				rc1 = sn->max_tp_rate;
 		} else {
 			rc1 = sn->max_tp_rate2;
@@ -525,6 +532,9 @@ ath_rate_tx_complete(struct ath_softc *s
 		if (tries <= tries1)
 			return;
 
+		if (bf->rcflags)
+			sn->sample_count++;
+
 		if  (tries2 < 0)
 			return;
 		tries = tries - tries1;
--- a/net80211/ieee80211_rate.h
+++ b/net80211/ieee80211_rate.h
@@ -87,6 +87,7 @@ struct ieee80211_mrr {
 	int retries2;
 	int rate3;
 	int retries3;
+	int privflags;
 };
 
 struct ieee80211_rate_ops {
