From 63951c39d3679861069029d1d7d58e938d999b20 Mon Sep 17 00:00:00 2001
From: Matthew Fatheree <Matthew.Fatheree@belkin.com>
Date: Tue, 13 May 2014 23:21:08 +0700
Subject: [PATCH 17/31] Add alljoyn package version 14.0.2

 - Add alljoyn package version 14.0.2 from
   https://allseenalliance.org/sites/default/files/resources/
 - Build the chat sample application
 - Fix netlink buffer size when the platform has many network interfaces

Signed-off-by: Matthew Fatheree <Matthew.Fatheree@belkin.com>
---
 package/alljoyn/Makefile                           |  285 ++++++++++++++++++++
 package/alljoyn/files/alljoyn.config               |   23 ++
 package/alljoyn/files/alljoyn.defaults             |    9 +
 package/alljoyn/files/alljoyn.init                 |  178 ++++++++++++
 .../001-Fix-too-many-network-interfaces.patch      |   12 +
 5 files changed, 507 insertions(+)
 create mode 100644 package/alljoyn/Makefile
 create mode 100644 package/alljoyn/files/alljoyn.config
 create mode 100644 package/alljoyn/files/alljoyn.defaults
 create mode 100644 package/alljoyn/files/alljoyn.init
 create mode 100644 package/alljoyn/patches/001-Fix-too-many-network-interfaces.patch

diff --git a/package/alljoyn/Makefile b/package/alljoyn/Makefile
new file mode 100644
index 0000000..846b5c9
--- /dev/null
+++ b/package/alljoyn/Makefile
@@ -0,0 +1,285 @@
+# Copyright (c) 2012-2013, AllSeen Alliance. All rights reserved.
+#
+#    Permission to use, copy, modify, and/or distribute this software for any
+#    purpose with or without fee is hereby granted, provided that the above
+#    copyright notice and this permission notice appear in all copies.
+#
+#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+#
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=alljoyn
+PKG_VERSION:=14.02.00
+PKG_RELEASE:=1
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(PKG_VERSION)-src
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION)-src.tar.gz
+PKG_SOURCE_URL:=https://allseenalliance.org/sites/default/files/resources/
+PKG_MD5SUM:=5c8ca6ff6b7480c9e108dc5a96dcfe0a
+
+# SCons supports parallel builds but does not support make's jobserver
+PKG_BUILD_PARALLEL:=$(if $(CONFIG_PKG_BUILD_USE_JOBSERVER),0,1)
+
+PKG_CONFIG_DEPENDS:= \
+	CONFIG_DEBUG \
+	CONFIG_PACKAGE_alljoyn-c \
+	CONFIG_PACKAGE_alljoyn-about \
+	CONFIG_PACKAGE_alljoyn-samples
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/alljoyn/Default
+  SECTION:=net
+  CATEGORY:=Network
+  DEPENDS:=+libopenssl +libpthread +librt +libstdcpp
+  URL:=http://www.allseenalliance.org
+  MAINTAINER:=AllSeen Alliance <allseen-core@lists.allseenalliance.org>
+endef
+
+define Package/alljoyn
+$(call Package/alljoyn/Default)
+  TITLE:=AllJoyn Peer-to-Peer networking
+  MENU:=1
+endef
+
+define Package/alljoyn/description
+AllJoyn is a daemon and application framework for developing
+ad hoc peer-to-peer applications.  This includes the run-time
+daemon and C++ library.
+endef
+
+
+define Package/alljoyn-c
+$(call Package/alljoyn/Default)
+  TITLE:=AllJoyn Peer-to-Peer networking - C binding
+  DEPENDS:=alljoyn
+endef
+
+define Package/alljoyn-c/description
+AllJoyn C binding.  This provides a C library for building
+AllJoyn programs in C.  This is just a C callable wrapper
+to the C++ library.
+endef
+
+
+ALLJOYN_BINDINGS:=cpp,
+ALLJOYN_SERVICES:=
+ALLJOYN_BUILD_SERVICES_SAMPLES:=off
+
+ifdef CONFIG_PACKAGE_alljoyn-c
+  ALLJOYN_BINDINGS+=c,
+endif
+
+define AJServicePackage
+  ifdef CONFIG_PACKAGE_alljoyn-$(1)
+    ALLJOYN_SERVICES+=$(1),
+  endif
+
+  define Package/alljoyn-$(1)
+  $(call Package/alljoyn/Default)
+    TITLE:=AllJoyn - $(2) service library
+    DEPENDS:=alljoyn $(3)
+  endef
+
+  define Package/alljoyn-$(1)/description
+AllJoyn $(2) service library.
+  endef
+
+  define Package/alljoyn-$(1)/install
+	$$(INSTALL_DIR) $$(1)/usr/lib
+	$$(CP) $$(PKG_INSTALL_DIR)/$(1)/lib/liballjoyn_$(1).so $$(1)/usr/lib/
+  endef
+endef
+
+
+$(eval $(call AJServicePackage,about,About,))
+
+
+define Package/alljoyn-samples
+$(call Package/alljoyn/Default)
+  TITLE:=AllJoyn Peer-to-Peer networking - testing samples
+  DEPENDS:=alljoyn \
+	+PACKAGE_alljoyn-about:alljoyn-about
+endef
+
+define Package/alljoyn-samples/description
+Alljoyn samples.  (This is primarily for testing.  The contents of this
+package vary according which other alljoyn packages are selected.)
+endef
+
+
+ifeq ($(CONFIG_DEBUG),y)
+  ALLJOYN_BUILD_VARIANT:=debug
+else
+  ALLJOYN_BUILD_VARIANT:=release
+endif
+
+
+PKG_INSTALL_DIR:=$(PKG_BUILD_DIR)/build/openwrt/openwrt/$(ALLJOYN_BUILD_VARIANT)/dist
+
+TARGET_CFLAGS+=-fPIC
+TARGET_CPPFLAGS+=-fPIC
+
+ifdef CONFIG_PACKAGE_alljoyn-samples
+  ifdef CONFIG_PACKAGE_alljoyn-about
+    ALLJOYN_BUILD_SERVICES_SAMPLES:=on
+  endif
+endif
+
+define Build/Configure/Default
+# Override default to do nothing
+endef
+
+define Build/Compile
+	scons -C $(PKG_BUILD_DIR) \
+		$(PKG_JOBS) \
+		WS=off \
+		CPU=openwrt \
+		OS=openwrt \
+		"BINDINGS=$(ALLJOYN_BINDINGS)" \
+		"SERVICES=$(ALLJOYN_SERVICES)" \
+		"BUILD_SERVICES_SAMPLES=$(ALLJOYN_BUILD_SERVICES_SAMPLES)" \
+		"VARIANT=$(ALLJOYN_BUILD_VARIANT)" \
+		BD=off \
+		ICE=off \
+		"TARGET_CC=$$(TARGET_CC)" \
+		"TARGET_CXX=$$(TARGET_CXX)" \
+		"TARGET_CFLAGS=$$(TARGET_CFLAGS)" \
+		"TARGET_CPPFLAGS=$$(TARGET_CPPFLAGS)" \
+		"TARGET_PATH=$$(TARGET_PATH)" \
+		"TARGET_LINKFLAGS=$$(TARGET_LDFLAGS)" \
+		"TARGET_LINK=$$(TARGET_CC)" \
+		"TARGET_AR=$$(TARGET_AR)" \
+		"TARGET_RANLIB=$$(TARGET_RANLIB)" \
+		"STAGING_DIR=$$(STAGING_DIR)"
+	 	# build the "chat" sample
+		 make -C $(PKG_BUILD_DIR)/alljoyn_core/samples/chat/linux \
+			"ALLJOYN_DIST=$(PKG_BUILD_DIR)/build/openwrt/openwrt/release/dist/cpp/" \
+			"CXX=$$(TARGET_CXX)"
+endef
+
+define AJServiceInstallDev
+  ifdef CONFIG_PACKAGE_alljoyn-$(1)
+	$$(INSTALL_DIR) $(2)/usr/include/alljoyn/$(1)
+	$$(CP) $$(PKG_INSTALL_DIR)/$(1)/inc/alljoyn/$(1)/*.h $(2)/usr/include/alljoyn/$(1)
+	$$(CP) $$(PKG_INSTALL_DIR)/$(1)/lib/liballjoyn_$(1).a $(2)/usr/lib/
+	$$(CP) $$(PKG_INSTALL_DIR)/$(1)/lib/liballjoyn_$(1).so $(2)/usr/lib/
+  endif
+endef
+
+define Build/InstallDev
+	$(INSTALL_DIR) $(1)/usr/include
+	$(INSTALL_DIR) $(1)/usr/include/alljoyn
+	$(INSTALL_DIR) $(1)/usr/include/qcc
+	$(INSTALL_DIR) $(1)/usr/include/qcc/posix
+	$(CP) $(PKG_INSTALL_DIR)/cpp/inc/alljoyn/*.h $(1)/usr/include/alljoyn/
+	$(CP) $(PKG_INSTALL_DIR)/cpp/inc/qcc/*.h $(1)/usr/include/qcc/
+	$(CP) $(PKG_INSTALL_DIR)/cpp/inc/qcc/posix/*.h $(1)/usr/include/qcc/posix/
+	$(INSTALL_DIR) $(1)/usr/lib
+	$(CP) $(PKG_INSTALL_DIR)/cpp/lib/liballjoyn.a $(1)/usr/lib/
+	$(CP) $(PKG_INSTALL_DIR)/cpp/lib/liballjoyn.so $(1)/usr/lib/
+ifdef CONFIG_PACKAGE_alljoyn-c
+	$(INSTALL_DIR) $(1)/usr/include/alljoyn_c
+	$(CP) $(PKG_INSTALL_DIR)/c/inc/alljoyn_c/*.h $(1)/usr/include/alljoyn_c/
+	$(CP) $(PKG_INSTALL_DIR)/c/lib/liballjoyn_c.a $(1)/usr/lib/
+	$(CP) $(PKG_INSTALL_DIR)/c/lib/liballjoyn_c.so $(1)/usr/lib/
+endif
+$(call AJServiceInstallDev,about,$(1))
+endef
+
+define Package/alljoyn/conffiles
+/etc/config/alljoyn
+endef
+
+define Package/alljoyn/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/alljoyn-daemon $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/alljoyn_core/samples/chat/linux/chat $(1)/usr/bin/alljoyn-chat
+	$(INSTALL_DIR) $(1)/usr/lib
+	$(CP) $(PKG_INSTALL_DIR)/cpp/lib/liballjoyn.so $(1)/usr/lib/
+	$(INSTALL_DIR) $(1)/etc/init.d
+	$(INSTALL_BIN) ./files/alljoyn.init $(1)/etc/init.d/alljoyn
+	$(INSTALL_DIR) $(1)/etc/uci-defaults
+	$(INSTALL_BIN) ./files/alljoyn.defaults $(1)/etc/uci-defaults/alljoyn
+	$(INSTALL_DIR) $(1)/etc/config
+	$(INSTALL_CONF) ./files/alljoyn.config $(1)/etc/config/alljoyn
+endef
+
+define Package/alljoyn-c/install
+	$(INSTALL_DIR) $(1)/usr/lib
+	$(CP) $(PKG_INSTALL_DIR)/c/lib/liballjoyn_c.so $(1)/usr/lib/
+endef
+
+
+
+define SamplesInstall
+ifdef CONFIG_PACKAGE_alljoyn-$(1)
+	$$(INSTALL_BIN) $$(PKG_INSTALL_DIR)/$(1)/bin/* $(2)/usr/bin/
+endif
+endef
+
+define Package/alljoyn-samples/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/advtunnel $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/aes_ccm $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/autochat $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/bastress $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/bastress2 $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/bbclient $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/bbjitter $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/bbjoin $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/bbservice $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/bbsig $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/bignum $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/compression $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/keystore $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/ledctrl $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/marshal $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/names $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/ns $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/rawclient $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/rawservice $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/remarshal $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/rsa $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/sessions $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/socktest $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/srp $(1)/usr/bin/
+	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/cpp/bin/unpack $(1)/usr/bin/
+$(call SamplesInstall,about,$(1))
+endef
+
+define Package/alljoyn/postinst
+#!/bin/sh
+if [ -z "$${IPKG_INSTROOT}" ]; then
+    . /etc/uci-defaults/alljoyn
+    rm -f /etc/uci-defaults/alljoyn
+fi
+exit 0
+endef
+
+define Package/alljoyn/prerm
+#!/bin/sh
+if [ -z "$${IPKG_INSTROOT}" ]; then
+    /etc/init.d/alljoyn stop
+    /etc/init.d/alljoyn disable
+    uci batch <<EOF
+del_list ucitrack.@network[-1].affects=alljoyn
+delete ucitrack.@alljoyn[-1]
+commit ucitrack
+EOF
+fi
+exit 0
+endef
+
+
+$(eval $(call BuildPackage,alljoyn))
+$(eval $(call BuildPackage,alljoyn-c))
+$(eval $(call BuildPackage,alljoyn-about))
+$(eval $(call BuildPackage,alljoyn-samples))
+
diff --git a/package/alljoyn/files/alljoyn.config b/package/alljoyn/files/alljoyn.config
new file mode 100644
index 0000000..fd88b87
--- /dev/null
+++ b/package/alljoyn/files/alljoyn.config
@@ -0,0 +1,23 @@
+
+config transport 'unix'
+	option enable '1'
+	option path 'alljoyn'
+	option abstract '1'
+
+config transport 'ip'
+	option enable '1'
+	option max_incomplete_conn '16'
+	option max_complete_conn '96'
+	option bus_port '9955'
+	option auth_timeout '20000'
+	option advertise_daemon '1'
+	option all_networks '0'
+	list networks 'lan'
+
+config transport 'slap'
+	option enable '0'
+	option path '/dev/ttyUSB0'
+	option baud 115200
+	option databits 8
+	option parity 'none'
+	option stopbits 1
diff --git a/package/alljoyn/files/alljoyn.defaults b/package/alljoyn/files/alljoyn.defaults
new file mode 100644
index 0000000..03c0522
--- /dev/null
+++ b/package/alljoyn/files/alljoyn.defaults
@@ -0,0 +1,9 @@
+#! /bin/sh
+uci batch <<EOF
+add ucitrack alljoyn
+set ucitrack.@alljoyn[-1].init=alljoyn
+add_list ucitrack.@network[-1].affects=alljoyn
+commit ucitrack
+EOF
+/etc/init.d/alljoyn enable
+exit 0
diff --git a/package/alljoyn/files/alljoyn.init b/package/alljoyn/files/alljoyn.init
new file mode 100644
index 0000000..f45406d
--- /dev/null
+++ b/package/alljoyn/files/alljoyn.init
@@ -0,0 +1,178 @@
+#!/bin/sh /etc/rc.common
+
+# Copyright (c) 2013, AllSeen Alliance. All rights reserved.
+#
+#    Permission to use, copy, modify, and/or distribute this software for any
+#    purpose with or without fee is hereby granted, provided that the above
+#    copyright notice and this permission notice appear in all copies.
+#
+#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+#
+
+START=65
+
+SERVICE_PID_FILE=/var/run/alljoyn.pid
+
+CONFIGFILE="/var/etc/alljoyn.conf"
+
+
+check() {
+    local flag
+
+    config_get_bool flag "$1" "$2" 0
+
+    test "$flag" == "1"
+    return $?
+}
+
+
+process_network() {
+    local network="$1"
+    local var="$2"
+    local ifname
+
+    config_get ifname "$network" ifname
+    if [ -n "$ifname" ]; then
+	append "${var}" "${ifname}" ","
+    fi
+}
+
+process_networks() {
+    local section="$1"
+
+    if check "$section" all_networks; then
+	export "${section}_networks=*"
+    else
+	config_list_foreach "$section" networks process_network "${section}_networks"
+
+	if [ "$section" == "ip" ]; then
+	    # special case IP until multiple interfaces are properly supported for IP
+	    local len
+	    config_get len ip networks_LENGTH
+
+	    if [ "$len" == "1" ]; then
+		local network
+		config_get network ip networks_ITEM1
+		config_get addr "$network" ipaddr
+	    fi
+	fi
+    fi
+}
+
+
+process_unix_transport() {
+    if check unix enable; then
+	local path
+	local abstract
+
+
+	config_get path unix path "alljoyn"
+	config_get_bool abstract unix abstract "1"
+
+	if [ -n "$abstract" ]; then
+	    path="abstract=$path"
+	else
+	    path="path=$path"
+	fi
+	export ${NO_EXPORT:+-n} listen_specs="${listen_specs}
+  <listen>unix:${path}</listen>"
+    fi
+}
+
+
+process_ip_transport() {
+    if check ip enable; then
+	local port
+	local addr="0.0.0.0"
+
+	if check ip advertise_daemon; then
+	    export ${NO_EXPORT:+-n} ip_advertise_daemon="<tcp>
+    <property router_advertisement_prefix=\"org.alljoyn.BusNode.\"/>
+  </tcp>"
+	fi
+
+	process_networks ip
+
+	config_get port ip bus_port 9955
+
+	export ${NO_EXPORT:+-n} listen_specs="${listen_specs}
+  <listen>tcp:addr=${addr},port=${port}</listen>"
+
+	config_get ip_max_incomplete_conn ip max_incomplete_conn "$ip_max_incomplete_conn"
+	config_get ip_max_complete_conn ip max_complete_conn "$ip_max_complete_conn"
+	config_get ip_auth_timeout ip auth_timeout "$ip_auth_timeout"
+    fi
+}
+
+
+process_slap_transport() {
+    if check slap enable; then
+	local path
+	local baud
+
+	config_get path slap path "/dev/ttyUSB0"
+	config_get_bool baud slap baud "115200"
+	config_get databits slap databits "8"
+	config_get parity slap parity "none"
+	config_get stopbits slap stopbits "1"
+
+	export ${NO_EXPORT:+-n} listen_specs="${listen_specs}
+  <listen>slap:type=uart;dev=${path};baud=${baud};databits=${databits};parity=${parity};stopbits=${stopbits}</listen>"
+    fi
+}
+
+
+generate_conf_file() {
+    local listen_specs=""
+
+    local ip_max_incomplete_conn=16
+    local ip_max_complete_conn=64
+    local ip_auth_timeout=20000
+    local ip_networks=""
+    local ip_advertise_daemon=""
+
+    include /lib/network
+    scan_interfaces
+    config_load alljoyn
+
+    process_unix_transport
+    process_ip_transport
+    process_slap_transport
+
+    mkdir -p $(dirname $CONFIGFILE)
+
+    cat > $CONFIGFILE <<EOF
+<busconfig>
+  <type>alljoyn</type>
+  <fork/>
+  <syslog/>
+  <pidfile>${SERVICE_PID_FILE}</pidfile>
+  ${listen_specs}
+  ${ip_advertise_daemon}
+  <ip_name_service>
+    <property interfaces="${ip_networks}"/>
+  </ip_name_service>
+  <limit max_incomplete_connections="${ip_max_incomplete_conn}"/>
+  <limit max_completed_connections="${ip_max_complete_conn}"/>
+  <limit auth_timeout="${ip_auth_timeout}"/>
+  <property restrict_untrusted_clients="false"/>
+  <limit max_untrusted_clients="${ip_max_complete_conn}"/>
+</busconfig>
+EOF
+}
+
+
+start() {
+    generate_conf_file
+    service_start /usr/bin/alljoyn-daemon --config-file=$CONFIGFILE
+}
+
+stop() {
+    service_stop /usr/bin/alljoyn-daemon
+}
diff --git a/package/alljoyn/patches/001-Fix-too-many-network-interfaces.patch b/package/alljoyn/patches/001-Fix-too-many-network-interfaces.patch
new file mode 100644
index 0000000..f32963e
--- /dev/null
+++ b/package/alljoyn/patches/001-Fix-too-many-network-interfaces.patch
@@ -0,0 +1,12 @@
+diff --git a/common/os/posix/IfConfigLinux.cc b/common/os/posix/IfConfigLinux.cc
+index d846259..ca91bf2 100644
+--- a/common/os/posix/IfConfigLinux.cc
++++ b/common/os/posix/IfConfigLinux.cc
+@@ -380,7 +380,7 @@ static std::list<IfEntry> NetlinkGetInterfaces(void)
+     // everyone else does and just allocate a  "big enough' buffer.  We choose
+     // 64K which should handle about 150 interfaces.
+     //
+-    const uint32_t BUFSIZE = 65536;
++    const uint32_t BUFSIZE = 262144;
+     char* buffer = new char[BUFSIZE];
+     uint32_t len;
-- 
1.7.9.5

